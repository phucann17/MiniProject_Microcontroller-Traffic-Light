
VXL_MiniProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004054  08004054  00005054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004080  08004080  0000604c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004080  08004080  0000604c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004080  08004080  0000604c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004080  08004080  00005080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004084  08004084  00005084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08004088  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000004c  080040d4  0000604c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080040d4  000061d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fadf  00000000  00000000  00006075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002768  00000000  00000000  00015b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  000182c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb9  00000000  00000000  000192e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c0a  00000000  00000000  00019f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148e7  00000000  00000000  00032ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a911  00000000  00000000  0004748a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000426c  00000000  00000000  000d1de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000d604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800403c 	.word	0x0800403c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	0800403c 	.word	0x0800403c

0800014c <isButtonPressed>:
int button_long_flag[2] = {0, 0};
int TIME[2] = {200, 200};
int time = 200;


int isButtonPressed(int idx){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[idx] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[idx] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000068 	.word	0x20000068

08000180 <isButtonLongPressed>:
int isButtonLongPressed(int idx){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (button_long_flag[idx] == 1){
 8000188:	4a09      	ldr	r2, [pc, #36]	@ (80001b0 <isButtonLongPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <isButtonLongPressed+0x22>
		button_long_flag[idx] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <isButtonLongPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLongPressed+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000070 	.word	0x20000070

080001b4 <getKeyInput>:

void getKeyInput(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e07b      	b.n	80002b8 <getKeyInput+0x104>
		KeyReg0[i] = KeyReg1[i];
 80001c0:	4a42      	ldr	r2, [pc, #264]	@ (80002cc <getKeyInput+0x118>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	4941      	ldr	r1, [pc, #260]	@ (80002d0 <getKeyInput+0x11c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001d0:	4a40      	ldr	r2, [pc, #256]	@ (80002d4 <getKeyInput+0x120>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	493c      	ldr	r1, [pc, #240]	@ (80002cc <getKeyInput+0x118>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[0] = HAL_GPIO_ReadPin(GPIOA, UP_BUTTON);
 80001e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001e4:	483c      	ldr	r0, [pc, #240]	@ (80002d8 <getKeyInput+0x124>)
 80001e6:	f001 fcfb 	bl	8001be0 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b39      	ldr	r3, [pc, #228]	@ (80002d4 <getKeyInput+0x120>)
 80001f0:	601a      	str	r2, [r3, #0]
		KeyReg2[1] = HAL_GPIO_ReadPin(GPIOA, SET_BUTTON);
 80001f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001f6:	4838      	ldr	r0, [pc, #224]	@ (80002d8 <getKeyInput+0x124>)
 80001f8:	f001 fcf2 	bl	8001be0 <HAL_GPIO_ReadPin>
 80001fc:	4603      	mov	r3, r0
 80001fe:	461a      	mov	r2, r3
 8000200:	4b34      	ldr	r3, [pc, #208]	@ (80002d4 <getKeyInput+0x120>)
 8000202:	605a      	str	r2, [r3, #4]

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000204:	4a32      	ldr	r2, [pc, #200]	@ (80002d0 <getKeyInput+0x11c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	492f      	ldr	r1, [pc, #188]	@ (80002cc <getKeyInput+0x118>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d14c      	bne.n	80002b2 <getKeyInput+0xfe>
 8000218:	4a2c      	ldr	r2, [pc, #176]	@ (80002cc <getKeyInput+0x118>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	492c      	ldr	r1, [pc, #176]	@ (80002d4 <getKeyInput+0x120>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d142      	bne.n	80002b2 <getKeyInput+0xfe>
			if (KeyReg3[i] != KeyReg2[i]){
 800022c:	4a2b      	ldr	r2, [pc, #172]	@ (80002dc <getKeyInput+0x128>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4927      	ldr	r1, [pc, #156]	@ (80002d4 <getKeyInput+0x120>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d018      	beq.n	8000272 <getKeyInput+0xbe>
				KeyReg3[i] = KeyReg2[i];
 8000240:	4a24      	ldr	r2, [pc, #144]	@ (80002d4 <getKeyInput+0x120>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4924      	ldr	r1, [pc, #144]	@ (80002dc <getKeyInput+0x128>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 8000250:	4a22      	ldr	r2, [pc, #136]	@ (80002dc <getKeyInput+0x128>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d12a      	bne.n	80002b2 <getKeyInput+0xfe>
					TIME[i] = 200;
 800025c:	4a20      	ldr	r2, [pc, #128]	@ (80002e0 <getKeyInput+0x12c>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	21c8      	movs	r1, #200	@ 0xc8
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 8000266:	4a1f      	ldr	r2, [pc, #124]	@ (80002e4 <getKeyInput+0x130>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2101      	movs	r1, #1
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000270:	e01f      	b.n	80002b2 <getKeyInput+0xfe>
				}
			}else{
				if (KeyReg3[i] == PRESSED_STATE){
 8000272:	4a1a      	ldr	r2, [pc, #104]	@ (80002dc <getKeyInput+0x128>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d119      	bne.n	80002b2 <getKeyInput+0xfe>
					if (TIME[i] > 0){
 800027e:	4a18      	ldr	r2, [pc, #96]	@ (80002e0 <getKeyInput+0x12c>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	dd09      	ble.n	800029e <getKeyInput+0xea>
						TIME[i]--;
 800028a:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <getKeyInput+0x12c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000292:	1e5a      	subs	r2, r3, #1
 8000294:	4912      	ldr	r1, [pc, #72]	@ (80002e0 <getKeyInput+0x12c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800029c:	e009      	b.n	80002b2 <getKeyInput+0xfe>
					}
					else{
						button_long_flag[i] = 1;
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <getKeyInput+0x134>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2101      	movs	r1, #1
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						TIME[i] = 200;
 80002a8:	4a0d      	ldr	r2, [pc, #52]	@ (80002e0 <getKeyInput+0x12c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	21c8      	movs	r1, #200	@ 0xc8
 80002ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3301      	adds	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	2202      	movs	r2, #2
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4293      	cmp	r3, r2
 80002be:	f6ff af7f 	blt.w	80001c0 <getKeyInput+0xc>
//					KeyReg3[i] = NORMAL_STATE;
//				}
			}
		}
	}
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000008 	.word	0x20000008
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000010 	.word	0x20000010
 80002d8:	40010800 	.word	0x40010800
 80002dc:	20000018 	.word	0x20000018
 80002e0:	20000020 	.word	0x20000020
 80002e4:	20000068 	.word	0x20000068
 80002e8:	20000070 	.word	0x20000070

080002ec <run_automatic>:
 *
 *  Created on: Apr 5, 2025
 *      Author: Admin
 */
#include "fsm_automatic.h"
void run_automatic(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	switch (status1){
 80002f0:	4b7a      	ldr	r3, [pc, #488]	@ (80004dc <run_automatic+0x1f0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b0d      	cmp	r3, #13
 80002f6:	d86b      	bhi.n	80003d0 <run_automatic+0xe4>
 80002f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000300 <run_automatic+0x14>)
 80002fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fe:	bf00      	nop
 8000300:	08000339 	.word	0x08000339
 8000304:	080003d1 	.word	0x080003d1
 8000308:	080003d1 	.word	0x080003d1
 800030c:	080003d1 	.word	0x080003d1
 8000310:	080003d1 	.word	0x080003d1
 8000314:	080003d1 	.word	0x080003d1
 8000318:	080003d1 	.word	0x080003d1
 800031c:	080003d1 	.word	0x080003d1
 8000320:	080003d1 	.word	0x080003d1
 8000324:	080003d1 	.word	0x080003d1
 8000328:	080003d1 	.word	0x080003d1
 800032c:	08000351 	.word	0x08000351
 8000330:	080003b5 	.word	0x080003b5
 8000334:	08000399 	.word	0x08000399
		case INIT:
			ResetLight1();
 8000338:	f000 fb46 	bl	80009c8 <ResetLight1>
			status1 = RED_LED_AUTO;
 800033c:	4b67      	ldr	r3, [pc, #412]	@ (80004dc <run_automatic+0x1f0>)
 800033e:	220b      	movs	r2, #11
 8000340:	601a      	str	r2, [r3, #0]
			count1 = time_red;
 8000342:	4b67      	ldr	r3, [pc, #412]	@ (80004e0 <run_automatic+0x1f4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a67      	ldr	r2, [pc, #412]	@ (80004e4 <run_automatic+0x1f8>)
 8000348:	6013      	str	r3, [r2, #0]
			lcd_clear_display();
 800034a:	f000 fc27 	bl	8000b9c <lcd_clear_display>
			break;
 800034e:	e046      	b.n	80003de <run_automatic+0xf2>

		case RED_LED_AUTO:
			RedLight1();
 8000350:	f000 fb50 	bl	80009f4 <RedLight1>
			if (count1 == 0){
 8000354:	4b63      	ldr	r3, [pc, #396]	@ (80004e4 <run_automatic+0x1f8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d106      	bne.n	800036a <run_automatic+0x7e>
				status1 = GREEN_LED_AUTO;
 800035c:	4b5f      	ldr	r3, [pc, #380]	@ (80004dc <run_automatic+0x1f0>)
 800035e:	220d      	movs	r2, #13
 8000360:	601a      	str	r2, [r3, #0]
				count1 = time_green;
 8000362:	4b61      	ldr	r3, [pc, #388]	@ (80004e8 <run_automatic+0x1fc>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a5f      	ldr	r2, [pc, #380]	@ (80004e4 <run_automatic+0x1f8>)
 8000368:	6013      	str	r3, [r2, #0]
			}
			if (isButtonLongPressed(up_button)){
 800036a:	2000      	movs	r0, #0
 800036c:	f7ff ff08 	bl	8000180 <isButtonLongPressed>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d02e      	beq.n	80003d4 <run_automatic+0xe8>
				ResetLight1();
 8000376:	f000 fb27 	bl	80009c8 <ResetLight1>
				ResetLight2();
 800037a:	f000 fbbf 	bl	8000afc <ResetLight2>
				status1 = RED_GREEN_MAN;
 800037e:	4b57      	ldr	r3, [pc, #348]	@ (80004dc <run_automatic+0x1f0>)
 8000380:	2215      	movs	r2, #21
 8000382:	601a      	str	r2, [r3, #0]
				status2 = RED_GREEN_MAN;
 8000384:	4b59      	ldr	r3, [pc, #356]	@ (80004ec <run_automatic+0x200>)
 8000386:	2215      	movs	r2, #21
 8000388:	601a      	str	r2, [r3, #0]
				count1 = scale*10;
 800038a:	4b56      	ldr	r3, [pc, #344]	@ (80004e4 <run_automatic+0x1f8>)
 800038c:	2264      	movs	r2, #100	@ 0x64
 800038e:	601a      	str	r2, [r3, #0]
				count2 = 1;
 8000390:	4b57      	ldr	r3, [pc, #348]	@ (80004f0 <run_automatic+0x204>)
 8000392:	2201      	movs	r2, #1
 8000394:	601a      	str	r2, [r3, #0]
			}
			break;
 8000396:	e01d      	b.n	80003d4 <run_automatic+0xe8>

		case GREEN_LED_AUTO:
			GreenLight1();
 8000398:	f000 fb58 	bl	8000a4c <GreenLight1>
			if (count1 == 0){
 800039c:	4b51      	ldr	r3, [pc, #324]	@ (80004e4 <run_automatic+0x1f8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d119      	bne.n	80003d8 <run_automatic+0xec>
				status1 = YELLOW_LED_AUTO;
 80003a4:	4b4d      	ldr	r3, [pc, #308]	@ (80004dc <run_automatic+0x1f0>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	601a      	str	r2, [r3, #0]
				count1 = time_yellow;
 80003aa:	4b52      	ldr	r3, [pc, #328]	@ (80004f4 <run_automatic+0x208>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a4d      	ldr	r2, [pc, #308]	@ (80004e4 <run_automatic+0x1f8>)
 80003b0:	6013      	str	r3, [r2, #0]
			}
			break;
 80003b2:	e011      	b.n	80003d8 <run_automatic+0xec>

		case YELLOW_LED_AUTO:
			YellowLight1();
 80003b4:	f000 fb34 	bl	8000a20 <YellowLight1>
			if (count1 == 0){
 80003b8:	4b4a      	ldr	r3, [pc, #296]	@ (80004e4 <run_automatic+0x1f8>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d10d      	bne.n	80003dc <run_automatic+0xf0>
				status1 = RED_LED_AUTO;
 80003c0:	4b46      	ldr	r3, [pc, #280]	@ (80004dc <run_automatic+0x1f0>)
 80003c2:	220b      	movs	r2, #11
 80003c4:	601a      	str	r2, [r3, #0]
				count1 = time_red;
 80003c6:	4b46      	ldr	r3, [pc, #280]	@ (80004e0 <run_automatic+0x1f4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a46      	ldr	r2, [pc, #280]	@ (80004e4 <run_automatic+0x1f8>)
 80003cc:	6013      	str	r3, [r2, #0]
			}
			break;
 80003ce:	e005      	b.n	80003dc <run_automatic+0xf0>

		default:
			break;
 80003d0:	bf00      	nop
 80003d2:	e004      	b.n	80003de <run_automatic+0xf2>
			break;
 80003d4:	bf00      	nop
 80003d6:	e002      	b.n	80003de <run_automatic+0xf2>
			break;
 80003d8:	bf00      	nop
 80003da:	e000      	b.n	80003de <run_automatic+0xf2>
			break;
 80003dc:	bf00      	nop
	}

	switch (status2){
 80003de:	4b43      	ldr	r3, [pc, #268]	@ (80004ec <run_automatic+0x200>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b0d      	cmp	r3, #13
 80003e4:	d854      	bhi.n	8000490 <run_automatic+0x1a4>
 80003e6:	a201      	add	r2, pc, #4	@ (adr r2, 80003ec <run_automatic+0x100>)
 80003e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ec:	08000425 	.word	0x08000425
 80003f0:	08000491 	.word	0x08000491
 80003f4:	08000491 	.word	0x08000491
 80003f8:	08000491 	.word	0x08000491
 80003fc:	08000491 	.word	0x08000491
 8000400:	08000491 	.word	0x08000491
 8000404:	08000491 	.word	0x08000491
 8000408:	08000491 	.word	0x08000491
 800040c:	08000491 	.word	0x08000491
 8000410:	08000491 	.word	0x08000491
 8000414:	08000491 	.word	0x08000491
 8000418:	0800043d 	.word	0x0800043d
 800041c:	08000475 	.word	0x08000475
 8000420:	08000459 	.word	0x08000459
			case INIT:
				ResetLight2();
 8000424:	f000 fb6a 	bl	8000afc <ResetLight2>
				status2 = GREEN_LED_AUTO;
 8000428:	4b30      	ldr	r3, [pc, #192]	@ (80004ec <run_automatic+0x200>)
 800042a:	220d      	movs	r2, #13
 800042c:	601a      	str	r2, [r3, #0]
				count2 = time_green;
 800042e:	4b2e      	ldr	r3, [pc, #184]	@ (80004e8 <run_automatic+0x1fc>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a2f      	ldr	r2, [pc, #188]	@ (80004f0 <run_automatic+0x204>)
 8000434:	6013      	str	r3, [r2, #0]
				lcd_clear_display();
 8000436:	f000 fbb1 	bl	8000b9c <lcd_clear_display>
				break;
 800043a:	e030      	b.n	800049e <run_automatic+0x1b2>

			case RED_LED_AUTO:
				RedLight2();
 800043c:	f000 fb1c 	bl	8000a78 <RedLight2>
				if (count2 == 0){
 8000440:	4b2b      	ldr	r3, [pc, #172]	@ (80004f0 <run_automatic+0x204>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d125      	bne.n	8000494 <run_automatic+0x1a8>
					status2 = GREEN_LED_AUTO;
 8000448:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <run_automatic+0x200>)
 800044a:	220d      	movs	r2, #13
 800044c:	601a      	str	r2, [r3, #0]
					count2 = time_green;
 800044e:	4b26      	ldr	r3, [pc, #152]	@ (80004e8 <run_automatic+0x1fc>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a27      	ldr	r2, [pc, #156]	@ (80004f0 <run_automatic+0x204>)
 8000454:	6013      	str	r3, [r2, #0]
				}
				break;
 8000456:	e01d      	b.n	8000494 <run_automatic+0x1a8>

			case GREEN_LED_AUTO:
				GreenLight2();
 8000458:	f000 fb3a 	bl	8000ad0 <GreenLight2>
				if (count2 == 0){
 800045c:	4b24      	ldr	r3, [pc, #144]	@ (80004f0 <run_automatic+0x204>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d119      	bne.n	8000498 <run_automatic+0x1ac>
					status2 = YELLOW_LED_AUTO;
 8000464:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <run_automatic+0x200>)
 8000466:	220c      	movs	r2, #12
 8000468:	601a      	str	r2, [r3, #0]
					count2 = time_yellow;
 800046a:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <run_automatic+0x208>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a20      	ldr	r2, [pc, #128]	@ (80004f0 <run_automatic+0x204>)
 8000470:	6013      	str	r3, [r2, #0]
				}
				break;
 8000472:	e011      	b.n	8000498 <run_automatic+0x1ac>

			case YELLOW_LED_AUTO:
				YellowLight2();
 8000474:	f000 fb16 	bl	8000aa4 <YellowLight2>
				if (count2 == 0){
 8000478:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <run_automatic+0x204>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d10d      	bne.n	800049c <run_automatic+0x1b0>
					status2 = RED_LED_AUTO;
 8000480:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <run_automatic+0x200>)
 8000482:	220b      	movs	r2, #11
 8000484:	601a      	str	r2, [r3, #0]
					count2 = time_red;
 8000486:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <run_automatic+0x1f4>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a19      	ldr	r2, [pc, #100]	@ (80004f0 <run_automatic+0x204>)
 800048c:	6013      	str	r3, [r2, #0]
				}
				break;
 800048e:	e005      	b.n	800049c <run_automatic+0x1b0>
			default:
				break;
 8000490:	bf00      	nop
 8000492:	e004      	b.n	800049e <run_automatic+0x1b2>
				break;
 8000494:	bf00      	nop
 8000496:	e002      	b.n	800049e <run_automatic+0x1b2>
				break;
 8000498:	bf00      	nop
 800049a:	e000      	b.n	800049e <run_automatic+0x1b2>
				break;
 800049c:	bf00      	nop
		}
	if ((status1/10) == 1 && count1 > 0) count1--;
 800049e:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <run_automatic+0x1f0>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b0a      	subs	r3, #10
 80004a4:	2b09      	cmp	r3, #9
 80004a6:	d808      	bhi.n	80004ba <run_automatic+0x1ce>
 80004a8:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <run_automatic+0x1f8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	dd04      	ble.n	80004ba <run_automatic+0x1ce>
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <run_automatic+0x1f8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	4a0b      	ldr	r2, [pc, #44]	@ (80004e4 <run_automatic+0x1f8>)
 80004b8:	6013      	str	r3, [r2, #0]
	if ((status2/10) == 1 && count2 > 0) count2--;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <run_automatic+0x200>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3b0a      	subs	r3, #10
 80004c0:	2b09      	cmp	r3, #9
 80004c2:	d808      	bhi.n	80004d6 <run_automatic+0x1ea>
 80004c4:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <run_automatic+0x204>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dd04      	ble.n	80004d6 <run_automatic+0x1ea>
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <run_automatic+0x204>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a07      	ldr	r2, [pc, #28]	@ (80004f0 <run_automatic+0x204>)
 80004d4:	6013      	str	r3, [r2, #0]
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000084 	.word	0x20000084
 80004e0:	2000002c 	.word	0x2000002c
 80004e4:	2000008c 	.word	0x2000008c
 80004e8:	20000034 	.word	0x20000034
 80004ec:	20000088 	.word	0x20000088
 80004f0:	20000090 	.word	0x20000090
 80004f4:	20000030 	.word	0x20000030

080004f8 <run_manual>:
 *
 *  Created on: Apr 5, 2025
 *      Author: Admin
 */
#include "fsm_manual.h"
void run_manual(){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	switch (status1){
 80004fc:	4b7c      	ldr	r3, [pc, #496]	@ (80006f0 <run_manual+0x1f8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3b15      	subs	r3, #21
 8000502:	2b03      	cmp	r3, #3
 8000504:	f200 80db 	bhi.w	80006be <run_manual+0x1c6>
 8000508:	a201      	add	r2, pc, #4	@ (adr r2, 8000510 <run_manual+0x18>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000521 	.word	0x08000521
 8000514:	08000587 	.word	0x08000587
 8000518:	080005f1 	.word	0x080005f1
 800051c:	08000655 	.word	0x08000655
		case RED_GREEN_MAN:
			RedLight1();
 8000520:	f000 fa68 	bl	80009f4 <RedLight1>
			GreenLight2();
 8000524:	f000 fad4 	bl	8000ad0 <GreenLight2>
			if (isButtonLongPressed(up_button) == 1 || count1 == 0){
 8000528:	2000      	movs	r0, #0
 800052a:	f7ff fe29 	bl	8000180 <isButtonLongPressed>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d003      	beq.n	800053c <run_manual+0x44>
 8000534:	4b6f      	ldr	r3, [pc, #444]	@ (80006f4 <run_manual+0x1fc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d10d      	bne.n	8000558 <run_manual+0x60>
				count1 = time_red;
 800053c:	4b6e      	ldr	r3, [pc, #440]	@ (80006f8 <run_manual+0x200>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a6c      	ldr	r2, [pc, #432]	@ (80006f4 <run_manual+0x1fc>)
 8000542:	6013      	str	r3, [r2, #0]
				count2 = time_green;
 8000544:	4b6d      	ldr	r3, [pc, #436]	@ (80006fc <run_manual+0x204>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a6d      	ldr	r2, [pc, #436]	@ (8000700 <run_manual+0x208>)
 800054a:	6013      	str	r3, [r2, #0]
				status1 = RED_LED_AUTO;
 800054c:	4b68      	ldr	r3, [pc, #416]	@ (80006f0 <run_manual+0x1f8>)
 800054e:	220b      	movs	r2, #11
 8000550:	601a      	str	r2, [r3, #0]
				status2 = GREEN_LED_AUTO;
 8000552:	4b6c      	ldr	r3, [pc, #432]	@ (8000704 <run_manual+0x20c>)
 8000554:	220d      	movs	r2, #13
 8000556:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(up_button) == 1){
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff fdf7 	bl	800014c <isButtonPressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	f040 80ae 	bne.w	80006c2 <run_manual+0x1ca>
				status1 = RED_YELLOW_MAN;
 8000566:	4b62      	ldr	r3, [pc, #392]	@ (80006f0 <run_manual+0x1f8>)
 8000568:	2216      	movs	r2, #22
 800056a:	601a      	str	r2, [r3, #0]
				count1 = timeout * scale;
 800056c:	4b66      	ldr	r3, [pc, #408]	@ (8000708 <run_manual+0x210>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4613      	mov	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	4413      	add	r3, r2
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	461a      	mov	r2, r3
 800057a:	4b5e      	ldr	r3, [pc, #376]	@ (80006f4 <run_manual+0x1fc>)
 800057c:	601a      	str	r2, [r3, #0]
				count2 = 1;
 800057e:	4b60      	ldr	r3, [pc, #384]	@ (8000700 <run_manual+0x208>)
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
			}
			break;
 8000584:	e09d      	b.n	80006c2 <run_manual+0x1ca>
		case RED_YELLOW_MAN:
			RedLight1();
 8000586:	f000 fa35 	bl	80009f4 <RedLight1>
			YellowLight2();
 800058a:	f000 fa8b 	bl	8000aa4 <YellowLight2>
			if (isButtonLongPressed(up_button) == 1 || count1 == 0){
 800058e:	2000      	movs	r0, #0
 8000590:	f7ff fdf6 	bl	8000180 <isButtonLongPressed>
 8000594:	4603      	mov	r3, r0
 8000596:	2b01      	cmp	r3, #1
 8000598:	d003      	beq.n	80005a2 <run_manual+0xaa>
 800059a:	4b56      	ldr	r3, [pc, #344]	@ (80006f4 <run_manual+0x1fc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d110      	bne.n	80005c4 <run_manual+0xcc>
				count1 = time_red - time_green;
 80005a2:	4b55      	ldr	r3, [pc, #340]	@ (80006f8 <run_manual+0x200>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b55      	ldr	r3, [pc, #340]	@ (80006fc <run_manual+0x204>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a51      	ldr	r2, [pc, #324]	@ (80006f4 <run_manual+0x1fc>)
 80005ae:	6013      	str	r3, [r2, #0]
				count2 = time_yellow;
 80005b0:	4b56      	ldr	r3, [pc, #344]	@ (800070c <run_manual+0x214>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a52      	ldr	r2, [pc, #328]	@ (8000700 <run_manual+0x208>)
 80005b6:	6013      	str	r3, [r2, #0]
				status1 = RED_LED_AUTO;
 80005b8:	4b4d      	ldr	r3, [pc, #308]	@ (80006f0 <run_manual+0x1f8>)
 80005ba:	220b      	movs	r2, #11
 80005bc:	601a      	str	r2, [r3, #0]
				status2 = YELLOW_LED_AUTO;
 80005be:	4b51      	ldr	r3, [pc, #324]	@ (8000704 <run_manual+0x20c>)
 80005c0:	220c      	movs	r2, #12
 80005c2:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(up_button) == 1){
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fdc1 	bl	800014c <isButtonPressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d17a      	bne.n	80006c6 <run_manual+0x1ce>
				status1 = GREEN_RED_MAN;
 80005d0:	4b47      	ldr	r3, [pc, #284]	@ (80006f0 <run_manual+0x1f8>)
 80005d2:	2217      	movs	r2, #23
 80005d4:	601a      	str	r2, [r3, #0]
				count1 = timeout * scale;
 80005d6:	4b4c      	ldr	r3, [pc, #304]	@ (8000708 <run_manual+0x210>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	4613      	mov	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	461a      	mov	r2, r3
 80005e4:	4b43      	ldr	r3, [pc, #268]	@ (80006f4 <run_manual+0x1fc>)
 80005e6:	601a      	str	r2, [r3, #0]
				count2 = 1;
 80005e8:	4b45      	ldr	r3, [pc, #276]	@ (8000700 <run_manual+0x208>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
			}
			break;
 80005ee:	e06a      	b.n	80006c6 <run_manual+0x1ce>
		case GREEN_RED_MAN:
			GreenLight1();
 80005f0:	f000 fa2c 	bl	8000a4c <GreenLight1>
			RedLight2();
 80005f4:	f000 fa40 	bl	8000a78 <RedLight2>
			if (isButtonLongPressed(up_button) == 1 || count1 == 0){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fdc1 	bl	8000180 <isButtonLongPressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d003      	beq.n	800060c <run_manual+0x114>
 8000604:	4b3b      	ldr	r3, [pc, #236]	@ (80006f4 <run_manual+0x1fc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10d      	bne.n	8000628 <run_manual+0x130>
				count1 = time_green;
 800060c:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <run_manual+0x204>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a38      	ldr	r2, [pc, #224]	@ (80006f4 <run_manual+0x1fc>)
 8000612:	6013      	str	r3, [r2, #0]
				count2 = time_red;
 8000614:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <run_manual+0x200>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a39      	ldr	r2, [pc, #228]	@ (8000700 <run_manual+0x208>)
 800061a:	6013      	str	r3, [r2, #0]
				status1 = GREEN_LED_AUTO;
 800061c:	4b34      	ldr	r3, [pc, #208]	@ (80006f0 <run_manual+0x1f8>)
 800061e:	220d      	movs	r2, #13
 8000620:	601a      	str	r2, [r3, #0]
				status2 = RED_LED_AUTO;
 8000622:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <run_manual+0x20c>)
 8000624:	220b      	movs	r2, #11
 8000626:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(up_button) == 1){
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff fd8f 	bl	800014c <isButtonPressed>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d14a      	bne.n	80006ca <run_manual+0x1d2>
				status1 = YELLOW_RED_MAN;
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <run_manual+0x1f8>)
 8000636:	2218      	movs	r2, #24
 8000638:	601a      	str	r2, [r3, #0]
				count1 = timeout * scale;
 800063a:	4b33      	ldr	r3, [pc, #204]	@ (8000708 <run_manual+0x210>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	461a      	mov	r2, r3
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <run_manual+0x1fc>)
 800064a:	601a      	str	r2, [r3, #0]
				count2 = 1;
 800064c:	4b2c      	ldr	r3, [pc, #176]	@ (8000700 <run_manual+0x208>)
 800064e:	2201      	movs	r2, #1
 8000650:	601a      	str	r2, [r3, #0]
			}
			break;
 8000652:	e03a      	b.n	80006ca <run_manual+0x1d2>
		case YELLOW_RED_MAN:
			YellowLight1();
 8000654:	f000 f9e4 	bl	8000a20 <YellowLight1>
			RedLight2();
 8000658:	f000 fa0e 	bl	8000a78 <RedLight2>
			if (isButtonLongPressed(up_button) == 1 || count1 == 0){
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff fd8f 	bl	8000180 <isButtonLongPressed>
 8000662:	4603      	mov	r3, r0
 8000664:	2b01      	cmp	r3, #1
 8000666:	d003      	beq.n	8000670 <run_manual+0x178>
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <run_manual+0x1fc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d110      	bne.n	8000692 <run_manual+0x19a>
				count1 = time_yellow;
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <run_manual+0x214>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1f      	ldr	r2, [pc, #124]	@ (80006f4 <run_manual+0x1fc>)
 8000676:	6013      	str	r3, [r2, #0]
				count2 = time_red - time_green;
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <run_manual+0x200>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <run_manual+0x204>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <run_manual+0x208>)
 8000684:	6013      	str	r3, [r2, #0]
				status1 = YELLOW_LED_AUTO;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <run_manual+0x1f8>)
 8000688:	220c      	movs	r2, #12
 800068a:	601a      	str	r2, [r3, #0]
				status2 = RED_LED_AUTO;
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <run_manual+0x20c>)
 800068e:	220b      	movs	r2, #11
 8000690:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(up_button) == 1){
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fd5a 	bl	800014c <isButtonPressed>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d117      	bne.n	80006ce <run_manual+0x1d6>
				status1 = RED_GREEN_MAN;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <run_manual+0x1f8>)
 80006a0:	2215      	movs	r2, #21
 80006a2:	601a      	str	r2, [r3, #0]
				count1 = timeout * scale;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <run_manual+0x210>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4613      	mov	r3, r2
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4413      	add	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <run_manual+0x1fc>)
 80006b4:	601a      	str	r2, [r3, #0]
				count2 = 1;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <run_manual+0x208>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	601a      	str	r2, [r3, #0]
			}

			break;
 80006bc:	e007      	b.n	80006ce <run_manual+0x1d6>
		default:
			break;
 80006be:	bf00      	nop
 80006c0:	e006      	b.n	80006d0 <run_manual+0x1d8>
			break;
 80006c2:	bf00      	nop
 80006c4:	e004      	b.n	80006d0 <run_manual+0x1d8>
			break;
 80006c6:	bf00      	nop
 80006c8:	e002      	b.n	80006d0 <run_manual+0x1d8>
			break;
 80006ca:	bf00      	nop
 80006cc:	e000      	b.n	80006d0 <run_manual+0x1d8>
			break;
 80006ce:	bf00      	nop
	}
	if ((status1/10 == 2) && count1 > 0) count1--;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <run_manual+0x1f8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b14      	subs	r3, #20
 80006d6:	2b09      	cmp	r3, #9
 80006d8:	d808      	bhi.n	80006ec <run_manual+0x1f4>
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <run_manual+0x1fc>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dd04      	ble.n	80006ec <run_manual+0x1f4>
 80006e2:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <run_manual+0x1fc>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4a02      	ldr	r2, [pc, #8]	@ (80006f4 <run_manual+0x1fc>)
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000084 	.word	0x20000084
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	20000034 	.word	0x20000034
 8000700:	20000090 	.word	0x20000090
 8000704:	20000088 	.word	0x20000088
 8000708:	2000003c 	.word	0x2000003c
 800070c:	20000030 	.word	0x20000030

08000710 <run_setting>:
int tmp_yellow=0;
int tmp_green=0;
int flag =1;
int flag1 = 0;

void run_setting(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	if (status1 / 10 != 3){
 8000714:	4b9f      	ldr	r3, [pc, #636]	@ (8000994 <run_setting+0x284>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b1e      	subs	r3, #30
 800071a:	2b09      	cmp	r3, #9
 800071c:	d91c      	bls.n	8000758 <run_setting+0x48>
		if (isButtonLongPressed(set_button)){
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd2e 	bl	8000180 <isButtonLongPressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d016      	beq.n	8000758 <run_setting+0x48>
			count3 = 1*scale;
 800072a:	4b9b      	ldr	r3, [pc, #620]	@ (8000998 <run_setting+0x288>)
 800072c:	220a      	movs	r2, #10
 800072e:	601a      	str	r2, [r3, #0]
			status1 = RED_LED_SET;
 8000730:	4b98      	ldr	r3, [pc, #608]	@ (8000994 <run_setting+0x284>)
 8000732:	221f      	movs	r2, #31
 8000734:	601a      	str	r2, [r3, #0]
			status2 = RED_LED_SET;
 8000736:	4b99      	ldr	r3, [pc, #612]	@ (800099c <run_setting+0x28c>)
 8000738:	221f      	movs	r2, #31
 800073a:	601a      	str	r2, [r3, #0]
			count1 = 2;
 800073c:	4b98      	ldr	r3, [pc, #608]	@ (80009a0 <run_setting+0x290>)
 800073e:	2202      	movs	r2, #2
 8000740:	601a      	str	r2, [r3, #0]
			count2 = time_red;
 8000742:	4b98      	ldr	r3, [pc, #608]	@ (80009a4 <run_setting+0x294>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a98      	ldr	r2, [pc, #608]	@ (80009a8 <run_setting+0x298>)
 8000748:	6013      	str	r3, [r2, #0]
			ResetLight1();
 800074a:	f000 f93d 	bl	80009c8 <ResetLight1>
			ResetLight2();
 800074e:	f000 f9d5 	bl	8000afc <ResetLight2>
			flag=1;
 8000752:	4b96      	ldr	r3, [pc, #600]	@ (80009ac <run_setting+0x29c>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
		}
	}

	switch (status1){
 8000758:	4b8e      	ldr	r3, [pc, #568]	@ (8000994 <run_setting+0x284>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b21      	cmp	r3, #33	@ 0x21
 800075e:	f000 80a8 	beq.w	80008b2 <run_setting+0x1a2>
 8000762:	2b21      	cmp	r3, #33	@ 0x21
 8000764:	f300 80fe 	bgt.w	8000964 <run_setting+0x254>
 8000768:	2b1f      	cmp	r3, #31
 800076a:	d002      	beq.n	8000772 <run_setting+0x62>
 800076c:	2b20      	cmp	r3, #32
 800076e:	d051      	beq.n	8000814 <run_setting+0x104>
					GreenLight2();
				}
			break;

		default:
			break;
 8000770:	e0f8      	b.n	8000964 <run_setting+0x254>
			if (count3 == 0){
 8000772:	4b89      	ldr	r3, [pc, #548]	@ (8000998 <run_setting+0x288>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10b      	bne.n	8000792 <run_setting+0x82>
				count3 = 1*scale;
 800077a:	4b87      	ldr	r3, [pc, #540]	@ (8000998 <run_setting+0x288>)
 800077c:	220a      	movs	r2, #10
 800077e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOB, A1);
 8000780:	2120      	movs	r1, #32
 8000782:	488b      	ldr	r0, [pc, #556]	@ (80009b0 <run_setting+0x2a0>)
 8000784:	f001 fa5b 	bl	8001c3e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, A2);
 8000788:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800078c:	4888      	ldr	r0, [pc, #544]	@ (80009b0 <run_setting+0x2a0>)
 800078e:	f001 fa56 	bl	8001c3e <HAL_GPIO_TogglePin>
			if (isButtonPressed(up_button)){
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fcda 	bl	800014c <isButtonPressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d010      	beq.n	80007c0 <run_setting+0xb0>
				count2 += scale;
 800079e:	4b82      	ldr	r3, [pc, #520]	@ (80009a8 <run_setting+0x298>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	330a      	adds	r3, #10
 80007a4:	4a80      	ldr	r2, [pc, #512]	@ (80009a8 <run_setting+0x298>)
 80007a6:	6013      	str	r3, [r2, #0]
				if (count2 > 99*scale) count2 = scale;
 80007a8:	4b7f      	ldr	r3, [pc, #508]	@ (80009a8 <run_setting+0x298>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f240 32de 	movw	r2, #990	@ 0x3de
 80007b0:	4293      	cmp	r3, r2
 80007b2:	dd02      	ble.n	80007ba <run_setting+0xaa>
 80007b4:	4b7c      	ldr	r3, [pc, #496]	@ (80009a8 <run_setting+0x298>)
 80007b6:	220a      	movs	r2, #10
 80007b8:	601a      	str	r2, [r3, #0]
				flag = 1;
 80007ba:	4b7c      	ldr	r3, [pc, #496]	@ (80009ac <run_setting+0x29c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
			if (isButtonPressed(set_button)){
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff fcc3 	bl	800014c <isButtonPressed>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00a      	beq.n	80007e2 <run_setting+0xd2>
				tmp_red = count2;
 80007cc:	4b76      	ldr	r3, [pc, #472]	@ (80009a8 <run_setting+0x298>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a78      	ldr	r2, [pc, #480]	@ (80009b4 <run_setting+0x2a4>)
 80007d2:	6013      	str	r3, [r2, #0]
				count3 = 3*scale;
 80007d4:	4b70      	ldr	r3, [pc, #448]	@ (8000998 <run_setting+0x288>)
 80007d6:	221e      	movs	r2, #30
 80007d8:	601a      	str	r2, [r3, #0]
				RedLight1();
 80007da:	f000 f90b 	bl	80009f4 <RedLight1>
				RedLight2();
 80007de:	f000 f94b 	bl	8000a78 <RedLight2>
			if (isButtonLongPressed(set_button)){
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff fccc 	bl	8000180 <isButtonLongPressed>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f000 80bc 	beq.w	8000968 <run_setting+0x258>
				count2 = time_yellow;
 80007f0:	4b71      	ldr	r3, [pc, #452]	@ (80009b8 <run_setting+0x2a8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a6c      	ldr	r2, [pc, #432]	@ (80009a8 <run_setting+0x298>)
 80007f6:	6013      	str	r3, [r2, #0]
				count1 = 3;
 80007f8:	4b69      	ldr	r3, [pc, #420]	@ (80009a0 <run_setting+0x290>)
 80007fa:	2203      	movs	r2, #3
 80007fc:	601a      	str	r2, [r3, #0]
				ResetLight1();
 80007fe:	f000 f8e3 	bl	80009c8 <ResetLight1>
				ResetLight2();
 8000802:	f000 f97b 	bl	8000afc <ResetLight2>
				status1 = YELLOW_LED_SET;
 8000806:	4b63      	ldr	r3, [pc, #396]	@ (8000994 <run_setting+0x284>)
 8000808:	2220      	movs	r2, #32
 800080a:	601a      	str	r2, [r3, #0]
				flag = 1;
 800080c:	4b67      	ldr	r3, [pc, #412]	@ (80009ac <run_setting+0x29c>)
 800080e:	2201      	movs	r2, #1
 8000810:	601a      	str	r2, [r3, #0]
			break;
 8000812:	e0a9      	b.n	8000968 <run_setting+0x258>
				if (count3 == 0){
 8000814:	4b60      	ldr	r3, [pc, #384]	@ (8000998 <run_setting+0x288>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10a      	bne.n	8000832 <run_setting+0x122>
					count3 = 1*scale;
 800081c:	4b5e      	ldr	r3, [pc, #376]	@ (8000998 <run_setting+0x288>)
 800081e:	220a      	movs	r2, #10
 8000820:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOB, Y1);
 8000822:	2102      	movs	r1, #2
 8000824:	4862      	ldr	r0, [pc, #392]	@ (80009b0 <run_setting+0x2a0>)
 8000826:	f001 fa0a 	bl	8001c3e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(GPIOB, Y2);
 800082a:	2104      	movs	r1, #4
 800082c:	4860      	ldr	r0, [pc, #384]	@ (80009b0 <run_setting+0x2a0>)
 800082e:	f001 fa06 	bl	8001c3e <HAL_GPIO_TogglePin>
				if (isButtonPressed(up_button)){
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff fc8a 	bl	800014c <isButtonPressed>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d010      	beq.n	8000860 <run_setting+0x150>
					count2 += scale;
 800083e:	4b5a      	ldr	r3, [pc, #360]	@ (80009a8 <run_setting+0x298>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	330a      	adds	r3, #10
 8000844:	4a58      	ldr	r2, [pc, #352]	@ (80009a8 <run_setting+0x298>)
 8000846:	6013      	str	r3, [r2, #0]
					if (count2 > 99*scale) count2 = scale;
 8000848:	4b57      	ldr	r3, [pc, #348]	@ (80009a8 <run_setting+0x298>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f240 32de 	movw	r2, #990	@ 0x3de
 8000850:	4293      	cmp	r3, r2
 8000852:	dd02      	ble.n	800085a <run_setting+0x14a>
 8000854:	4b54      	ldr	r3, [pc, #336]	@ (80009a8 <run_setting+0x298>)
 8000856:	220a      	movs	r2, #10
 8000858:	601a      	str	r2, [r3, #0]
					flag = 1;
 800085a:	4b54      	ldr	r3, [pc, #336]	@ (80009ac <run_setting+0x29c>)
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(set_button)){
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fc73 	bl	800014c <isButtonPressed>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00a      	beq.n	8000882 <run_setting+0x172>
					tmp_green = count2;
 800086c:	4b4e      	ldr	r3, [pc, #312]	@ (80009a8 <run_setting+0x298>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a52      	ldr	r2, [pc, #328]	@ (80009bc <run_setting+0x2ac>)
 8000872:	6013      	str	r3, [r2, #0]
					count3 = 3*scale;
 8000874:	4b48      	ldr	r3, [pc, #288]	@ (8000998 <run_setting+0x288>)
 8000876:	221e      	movs	r2, #30
 8000878:	601a      	str	r2, [r3, #0]
					YellowLight1();
 800087a:	f000 f8d1 	bl	8000a20 <YellowLight1>
					YellowLight2();
 800087e:	f000 f911 	bl	8000aa4 <YellowLight2>
				if (isButtonLongPressed(set_button)){
 8000882:	2001      	movs	r0, #1
 8000884:	f7ff fc7c 	bl	8000180 <isButtonLongPressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d06e      	beq.n	800096c <run_setting+0x25c>
					count2 = time_yellow;
 800088e:	4b4a      	ldr	r3, [pc, #296]	@ (80009b8 <run_setting+0x2a8>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a45      	ldr	r2, [pc, #276]	@ (80009a8 <run_setting+0x298>)
 8000894:	6013      	str	r3, [r2, #0]
					count1 = 4;
 8000896:	4b42      	ldr	r3, [pc, #264]	@ (80009a0 <run_setting+0x290>)
 8000898:	2204      	movs	r2, #4
 800089a:	601a      	str	r2, [r3, #0]
					ResetLight1();
 800089c:	f000 f894 	bl	80009c8 <ResetLight1>
					ResetLight2();
 80008a0:	f000 f92c 	bl	8000afc <ResetLight2>
					status1 = GREEN_LED_SET;
 80008a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000994 <run_setting+0x284>)
 80008a6:	2221      	movs	r2, #33	@ 0x21
 80008a8:	601a      	str	r2, [r3, #0]
					flag = 1;
 80008aa:	4b40      	ldr	r3, [pc, #256]	@ (80009ac <run_setting+0x29c>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	601a      	str	r2, [r3, #0]
			break;
 80008b0:	e05c      	b.n	800096c <run_setting+0x25c>
				if (count3 == 0){
 80008b2:	4b39      	ldr	r3, [pc, #228]	@ (8000998 <run_setting+0x288>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10a      	bne.n	80008d0 <run_setting+0x1c0>
					count3 = 1*scale;
 80008ba:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <run_setting+0x288>)
 80008bc:	220a      	movs	r2, #10
 80008be:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOB, B1);
 80008c0:	2108      	movs	r1, #8
 80008c2:	483b      	ldr	r0, [pc, #236]	@ (80009b0 <run_setting+0x2a0>)
 80008c4:	f001 f9bb 	bl	8001c3e <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(GPIOB, B2);
 80008c8:	2110      	movs	r1, #16
 80008ca:	4839      	ldr	r0, [pc, #228]	@ (80009b0 <run_setting+0x2a0>)
 80008cc:	f001 f9b7 	bl	8001c3e <HAL_GPIO_TogglePin>
				if (isButtonPressed(up_button)){
 80008d0:	2000      	movs	r0, #0
 80008d2:	f7ff fc3b 	bl	800014c <isButtonPressed>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d010      	beq.n	80008fe <run_setting+0x1ee>
					count2 += scale;
 80008dc:	4b32      	ldr	r3, [pc, #200]	@ (80009a8 <run_setting+0x298>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	330a      	adds	r3, #10
 80008e2:	4a31      	ldr	r2, [pc, #196]	@ (80009a8 <run_setting+0x298>)
 80008e4:	6013      	str	r3, [r2, #0]
					if (count2 > 99*scale) count2 = scale;
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <run_setting+0x298>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f240 32de 	movw	r2, #990	@ 0x3de
 80008ee:	4293      	cmp	r3, r2
 80008f0:	dd02      	ble.n	80008f8 <run_setting+0x1e8>
 80008f2:	4b2d      	ldr	r3, [pc, #180]	@ (80009a8 <run_setting+0x298>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	601a      	str	r2, [r3, #0]
					flag = 1;
 80008f8:	4b2c      	ldr	r3, [pc, #176]	@ (80009ac <run_setting+0x29c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
				if (isButtonLongPressed(set_button)){
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff fc3e 	bl	8000180 <isButtonLongPressed>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d01a      	beq.n	8000940 <run_setting+0x230>
					if (tmp_red == tmp_yellow + tmp_green){
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <run_setting+0x2b0>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	4b2b      	ldr	r3, [pc, #172]	@ (80009bc <run_setting+0x2ac>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	441a      	add	r2, r3
 8000914:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <run_setting+0x2a4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d10b      	bne.n	8000934 <run_setting+0x224>
						time_red = tmp_red;
 800091c:	4b25      	ldr	r3, [pc, #148]	@ (80009b4 <run_setting+0x2a4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a20      	ldr	r2, [pc, #128]	@ (80009a4 <run_setting+0x294>)
 8000922:	6013      	str	r3, [r2, #0]
						time_yellow = tmp_yellow;
 8000924:	4b26      	ldr	r3, [pc, #152]	@ (80009c0 <run_setting+0x2b0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a23      	ldr	r2, [pc, #140]	@ (80009b8 <run_setting+0x2a8>)
 800092a:	6013      	str	r3, [r2, #0]
						time_green = tmp_green;
 800092c:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <run_setting+0x2ac>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a24      	ldr	r2, [pc, #144]	@ (80009c4 <run_setting+0x2b4>)
 8000932:	6013      	str	r3, [r2, #0]
					status1 = INIT;
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <run_setting+0x284>)
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
					status2 = INIT;
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <run_setting+0x28c>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(set_button)){
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fc03 	bl	800014c <isButtonPressed>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d011      	beq.n	8000970 <run_setting+0x260>
					tmp_green = count2;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <run_setting+0x298>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1a      	ldr	r2, [pc, #104]	@ (80009bc <run_setting+0x2ac>)
 8000952:	6013      	str	r3, [r2, #0]
					count3 = 3*scale;
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <run_setting+0x288>)
 8000956:	221e      	movs	r2, #30
 8000958:	601a      	str	r2, [r3, #0]
					GreenLight1();
 800095a:	f000 f877 	bl	8000a4c <GreenLight1>
					GreenLight2();
 800095e:	f000 f8b7 	bl	8000ad0 <GreenLight2>
			break;
 8000962:	e005      	b.n	8000970 <run_setting+0x260>
			break;
 8000964:	bf00      	nop
 8000966:	e004      	b.n	8000972 <run_setting+0x262>
			break;
 8000968:	bf00      	nop
 800096a:	e002      	b.n	8000972 <run_setting+0x262>
			break;
 800096c:	bf00      	nop
 800096e:	e000      	b.n	8000972 <run_setting+0x262>
			break;
 8000970:	bf00      	nop
	}

	if (status1 / 10 == 3 && count3 > 0) count3--;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <run_setting+0x284>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3b1e      	subs	r3, #30
 8000978:	2b09      	cmp	r3, #9
 800097a:	d808      	bhi.n	800098e <run_setting+0x27e>
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <run_setting+0x288>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	dd04      	ble.n	800098e <run_setting+0x27e>
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <run_setting+0x288>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3b01      	subs	r3, #1
 800098a:	4a03      	ldr	r2, [pc, #12]	@ (8000998 <run_setting+0x288>)
 800098c:	6013      	str	r3, [r2, #0]
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000084 	.word	0x20000084
 8000998:	20000038 	.word	0x20000038
 800099c:	20000088 	.word	0x20000088
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	2000002c 	.word	0x2000002c
 80009a8:	20000090 	.word	0x20000090
 80009ac:	20000028 	.word	0x20000028
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	20000078 	.word	0x20000078
 80009b8:	20000030 	.word	0x20000030
 80009bc:	20000080 	.word	0x20000080
 80009c0:	2000007c 	.word	0x2000007c
 80009c4:	20000034 	.word	0x20000034

080009c8 <ResetLight1>:

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

void ResetLight1(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2120      	movs	r1, #32
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <ResetLight1+0x28>)
 80009d2:	f001 f91c 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2108      	movs	r1, #8
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <ResetLight1+0x28>)
 80009dc:	f001 f917 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y1 , RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <ResetLight1+0x28>)
 80009e6:	f001 f912 	bl	8001c0e <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010c00 	.word	0x40010c00

080009f4 <RedLight1>:

void RedLight1(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	4807      	ldr	r0, [pc, #28]	@ (8000a1c <RedLight1+0x28>)
 80009fe:	f001 f906 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2108      	movs	r1, #8
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <RedLight1+0x28>)
 8000a08:	f001 f901 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y1 , RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <RedLight1+0x28>)
 8000a12:	f001 f8fc 	bl	8001c0e <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010c00 	.word	0x40010c00

08000a20 <YellowLight1>:

void YellowLight1(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2120      	movs	r1, #32
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <YellowLight1+0x28>)
 8000a2a:	f001 f8f0 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2108      	movs	r1, #8
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <YellowLight1+0x28>)
 8000a34:	f001 f8eb 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y1 , SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <YellowLight1+0x28>)
 8000a3e:	f001 f8e6 	bl	8001c0e <HAL_GPIO_WritePin>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010c00 	.word	0x40010c00

08000a4c <GreenLight1>:

void GreenLight1(){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A1, RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2120      	movs	r1, #32
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <GreenLight1+0x28>)
 8000a56:	f001 f8da 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B1 , SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <GreenLight1+0x28>)
 8000a60:	f001 f8d5 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y1 , RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2102      	movs	r1, #2
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <GreenLight1+0x28>)
 8000a6a:	f001 f8d0 	bl	8001c0e <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <RedLight2>:

void RedLight2(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a82:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <RedLight2+0x28>)
 8000a84:	f001 f8c3 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <RedLight2+0x28>)
 8000a8e:	f001 f8be 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y2 , RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2104      	movs	r1, #4
 8000a96:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <RedLight2+0x28>)
 8000a98:	f001 f8b9 	bl	8001c0e <HAL_GPIO_WritePin>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40010c00 	.word	0x40010c00

08000aa4 <YellowLight2>:

void YellowLight2(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aae:	4807      	ldr	r0, [pc, #28]	@ (8000acc <YellowLight2+0x28>)
 8000ab0:	f001 f8ad 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <YellowLight2+0x28>)
 8000aba:	f001 f8a8 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y2 , SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	4802      	ldr	r0, [pc, #8]	@ (8000acc <YellowLight2+0x28>)
 8000ac4:	f001 f8a3 	bl	8001c0e <HAL_GPIO_WritePin>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40010c00 	.word	0x40010c00

08000ad0 <GreenLight2>:
void GreenLight2(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ada:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <GreenLight2+0x28>)
 8000adc:	f001 f897 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <GreenLight2+0x28>)
 8000ae6:	f001 f892 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y1 , RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2102      	movs	r1, #2
 8000aee:	4802      	ldr	r0, [pc, #8]	@ (8000af8 <GreenLight2+0x28>)
 8000af0:	f001 f88d 	bl	8001c0e <HAL_GPIO_WritePin>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40010c00 	.word	0x40010c00

08000afc <ResetLight2>:

void ResetLight2(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,A2, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b06:	4807      	ldr	r0, [pc, #28]	@ (8000b24 <ResetLight2+0x28>)
 8000b08:	f001 f881 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,B2 , RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <ResetLight2+0x28>)
 8000b12:	f001 f87c 	bl	8001c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Y2 , RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <ResetLight2+0x28>)
 8000b1c:	f001 f877 	bl	8001c0e <HAL_GPIO_WritePin>
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <Run_Traffic_Light>:

void BlinkLed(){
	HAL_GPIO_TogglePin(GPIOA, LED_PINK);
}

void Run_Traffic_Light(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	run_setting();
 8000b2c:	f7ff fdf0 	bl	8000710 <run_setting>
	run_manual();
 8000b30:	f7ff fce2 	bl	80004f8 <run_manual>
	run_automatic();
 8000b34:	f7ff fbda 	bl	80002ec <run_automatic>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f023 030f 	bic.w	r3, r3, #15
 8000b4c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	f043 030c 	orr.w	r3, r3, #12
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b68:	7bbb      	ldrb	r3, [r7, #14]
 8000b6a:	f043 030c 	orr.w	r3, r3, #12
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	f043 0308 	orr.w	r3, r3, #8
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b7c:	f107 0208 	add.w	r2, r7, #8
 8000b80:	2364      	movs	r3, #100	@ 0x64
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2304      	movs	r3, #4
 8000b86:	2142      	movs	r1, #66	@ 0x42
 8000b88:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <lcd_send_cmd+0x5c>)
 8000b8a:	f001 f9b5 	bl	8001ef8 <HAL_I2C_Master_Transmit>
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000094 	.word	0x20000094

08000b9c <lcd_clear_display>:
{
	while (*str) lcd_send_data (*str++);
}

void lcd_clear_display (void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ffcb 	bl	8000b3c <lcd_send_cmd>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 fc78 	bl	80014a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f822 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 f900 	bl	8000dbc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bbc:	f000 f888 	bl	8000cd0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000bc0:	f000 f8d2 	bl	8000d68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000bc4:	f000 f856 	bl	8000c74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000bc8:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <main+0x44>)
 8000bca:	f002 f94d 	bl	8002e68 <HAL_TIM_Base_Start_IT>
//  HAL_UART_Receive_IT(&huart2, rx_data, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000bce:	f000 f969 	bl	8000ea4 <SCH_Init>
  SCH_Add_Task(Run_Traffic_Light, 0, 100);
 8000bd2:	2264      	movs	r2, #100	@ 0x64
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <main+0x48>)
 8000bd8:	f000 f9a4 	bl	8000f24 <SCH_Add_Task>
  HAL_GPIO_WritePin(GPIOA, LED_PINK, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2120      	movs	r1, #32
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <main+0x4c>)
 8000be2:	f001 f814 	bl	8001c0e <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, LED_PINK, HAL_GPIO_ReadPin(GPIOA, UP_BUTTON));
//	  if (isButtonPressed(0) == 1){
//	  		  HAL_GPIO_TogglePin(GPIOA, LED_PINK);
//	  		  button_flag[0] = 0;
//	  	  }
	  SCH_Dispatch_Tasks();
 8000be6:	f000 faab 	bl	8001140 <SCH_Dispatch_Tasks>
  {
 8000bea:	bf00      	nop
 8000bec:	e7fb      	b.n	8000be6 <main+0x3a>
 8000bee:	bf00      	nop
 8000bf0:	200000e8 	.word	0x200000e8
 8000bf4:	08000b29 	.word	0x08000b29
 8000bf8:	40010800 	.word	0x40010800

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b090      	sub	sp, #64	@ 0x40
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	2228      	movs	r2, #40	@ 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 f9ea 	bl	8003fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c26:	2310      	movs	r3, #16
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 fcb8 	bl	80025a8 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f92b 	bl	8000e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 ff26 	bl	8002aac <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f917 	bl	8000e98 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3740      	adds	r7, #64	@ 0x40
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000c7a:	4a13      	ldr	r2, [pc, #76]	@ (8000cc8 <MX_I2C1_Init+0x54>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000c80:	4a12      	ldr	r2, [pc, #72]	@ (8000ccc <MX_I2C1_Init+0x58>)
 8000c82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000c92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb0:	4804      	ldr	r0, [pc, #16]	@ (8000cc4 <MX_I2C1_Init+0x50>)
 8000cb2:	f000 ffdd 	bl	8001c70 <HAL_I2C_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f000 f8ec 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000094 	.word	0x20000094
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	000186a0 	.word	0x000186a0

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cf6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d04:	2209      	movs	r2, #9
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d16:	f002 f857 	bl	8002dc8 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d20:	f000 f8ba 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d32:	f002 f9d5 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 f8ac 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d4e:	f002 fbad 	bl	80034ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 f89e 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200000e8 	.word	0x200000e8

08000d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	@ (8000db8 <MX_USART2_UART_Init+0x50>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_USART2_UART_Init+0x4c>)
 8000da0:	f002 fbee 	bl	8003580 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000daa:	f000 f875 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000130 	.word	0x20000130
 8000db8:	40004400 	.word	0x40004400

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <MX_GPIO_Init+0xb8>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a27      	ldr	r2, [pc, #156]	@ (8000e74 <MX_GPIO_Init+0xb8>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_GPIO_Init+0xb8>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <MX_GPIO_Init+0xb8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a21      	ldr	r2, [pc, #132]	@ (8000e74 <MX_GPIO_Init+0xb8>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_GPIO_Init+0xb8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2120      	movs	r1, #32
 8000e04:	481c      	ldr	r0, [pc, #112]	@ (8000e78 <MX_GPIO_Init+0xbc>)
 8000e06:	f000 ff02 	bl	8001c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f240 413e 	movw	r1, #1086	@ 0x43e
 8000e10:	481a      	ldr	r0, [pc, #104]	@ (8000e7c <MX_GPIO_Init+0xc0>)
 8000e12:	f000 fefc 	bl	8001c0e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e16:	2320      	movs	r3, #32
 8000e18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2302      	movs	r3, #2
 8000e24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4812      	ldr	r0, [pc, #72]	@ (8000e78 <MX_GPIO_Init+0xbc>)
 8000e2e:	f000 fd5b 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_3
 8000e32:	f240 433e 	movw	r3, #1086	@ 0x43e
 8000e36:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2302      	movs	r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480c      	ldr	r0, [pc, #48]	@ (8000e7c <MX_GPIO_Init+0xc0>)
 8000e4c:	f000 fd4c 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <MX_GPIO_Init+0xbc>)
 8000e66:	f000 fd3f 	bl	80018e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 100;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
//		if (counter <= 0){
//			counter = 100;
//			HAL_GPIO_TogglePin(GPIOA, LED_PINK);
//		}
//	}
	SCH_Update();
 8000e88:	f000 f8d6 	bl	8001038 <SCH_Update>
	getKeyInput();
 8000e8c:	f7ff f992 	bl	80001b4 <getKeyInput>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <Error_Handler+0x8>

08000ea4 <SCH_Init>:
#include "scheduler.h"
sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t start = 0;
uint8_t end = 0;

void SCH_Init(void){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < SCH_MAX_TASKS; i++){
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	e024      	b.n	8000efa <SCH_Init+0x56>
		SCH_tasks_G[i].pTask = 0x0000;
 8000eb0:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <SCH_Init+0x74>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	4413      	add	r3, r2
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 8000ebc:	4a16      	ldr	r2, [pc, #88]	@ (8000f18 <SCH_Init+0x74>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 8000eca:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <SCH_Init+0x74>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <SCH_Init+0x74>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	4413      	add	r3, r2
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].isRun = 0;
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <SCH_Init+0x74>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	4413      	add	r3, r2
 8000eee:	330d      	adds	r3, #13
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < SCH_MAX_TASKS; i++){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	ddd7      	ble.n	8000eb0 <SCH_Init+0xc>
	}
	start = end = 0;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SCH_Init+0x78>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <SCH_Init+0x78>)
 8000f08:	781a      	ldrb	r2, [r3, #0]
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <SCH_Init+0x7c>)
 8000f0c:	701a      	strb	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	20000178 	.word	0x20000178
 8000f1c:	200001c9 	.word	0x200001c9
 8000f20:	200001c8 	.word	0x200001c8

08000f24 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	if ((end + 1) % SCH_MAX_TASKS == start){
 8000f30:	4b3c      	ldr	r3, [pc, #240]	@ (8001024 <SCH_Add_Task+0x100>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	1c59      	adds	r1, r3, #1
 8000f36:	4b3c      	ldr	r3, [pc, #240]	@ (8001028 <SCH_Add_Task+0x104>)
 8000f38:	fb83 2301 	smull	r2, r3, r3, r1
 8000f3c:	105a      	asrs	r2, r3, #1
 8000f3e:	17cb      	asrs	r3, r1, #31
 8000f40:	1ad2      	subs	r2, r2, r3
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	1aca      	subs	r2, r1, r3
 8000f4a:	4b38      	ldr	r3, [pc, #224]	@ (800102c <SCH_Add_Task+0x108>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d060      	beq.n	8001014 <SCH_Add_Task+0xf0>
		return;
	}
	for (int i = start; i != end; i = (i + 1) % SCH_MAX_TASKS){
 8000f52:	4b36      	ldr	r3, [pc, #216]	@ (800102c <SCH_Add_Task+0x108>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e014      	b.n	8000f84 <SCH_Add_Task+0x60>
		if (pFunction == SCH_tasks_G[i].pTask){
 8000f5a:	4a35      	ldr	r2, [pc, #212]	@ (8001030 <SCH_Add_Task+0x10c>)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d056      	beq.n	8001018 <SCH_Add_Task+0xf4>
	for (int i = start; i != end; i = (i + 1) % SCH_MAX_TASKS){
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <SCH_Add_Task+0x104>)
 8000f70:	fb83 1302 	smull	r1, r3, r3, r2
 8000f74:	1059      	asrs	r1, r3, #1
 8000f76:	17d3      	asrs	r3, r2, #31
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <SCH_Add_Task+0x100>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d1e4      	bne.n	8000f5a <SCH_Add_Task+0x36>
			return;
		}
	}
	SCH_tasks_G[end].pTask = pFunction;
 8000f90:	4b24      	ldr	r3, [pc, #144]	@ (8001024 <SCH_Add_Task+0x100>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4a26      	ldr	r2, [pc, #152]	@ (8001030 <SCH_Add_Task+0x10c>)
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[end].Delay = DELAY / TICK;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <SCH_Add_Task+0x100>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4a23      	ldr	r2, [pc, #140]	@ (8001034 <SCH_Add_Task+0x110>)
 8000fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	4920      	ldr	r1, [pc, #128]	@ (8001030 <SCH_Add_Task+0x10c>)
 8000fb0:	0103      	lsls	r3, r0, #4
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[end].Period = PERIOD / TICK;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <SCH_Add_Task+0x100>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001034 <SCH_Add_Task+0x110>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	08da      	lsrs	r2, r3, #3
 8000fc8:	4919      	ldr	r1, [pc, #100]	@ (8001030 <SCH_Add_Task+0x10c>)
 8000fca:	0103      	lsls	r3, r0, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	3308      	adds	r3, #8
 8000fd0:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[end].isRun = 1;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	@ (8001024 <SCH_Add_Task+0x100>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4a16      	ldr	r2, [pc, #88]	@ (8001030 <SCH_Add_Task+0x10c>)
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	330d      	adds	r3, #13
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[end].RunMe = 0;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <SCH_Add_Task+0x100>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <SCH_Add_Task+0x10c>)
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	4413      	add	r3, r2
 8000fec:	330c      	adds	r3, #12
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
	end = (end + 1) % SCH_MAX_TASKS;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <SCH_Add_Task+0x100>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <SCH_Add_Task+0x104>)
 8000ffa:	fb83 1302 	smull	r1, r3, r3, r2
 8000ffe:	1059      	asrs	r1, r3, #1
 8001000:	17d3      	asrs	r3, r2, #31
 8001002:	1ac9      	subs	r1, r1, r3
 8001004:	460b      	mov	r3, r1
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	1ad1      	subs	r1, r2, r3
 800100c:	b2ca      	uxtb	r2, r1
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SCH_Add_Task+0x100>)
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e002      	b.n	800101a <SCH_Add_Task+0xf6>
		return;
 8001014:	bf00      	nop
 8001016:	e000      	b.n	800101a <SCH_Add_Task+0xf6>
			return;
 8001018:	bf00      	nop
}
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001c9 	.word	0x200001c9
 8001028:	66666667 	.word	0x66666667
 800102c:	200001c8 	.word	0x200001c8
 8001030:	20000178 	.word	0x20000178
 8001034:	cccccccd 	.word	0xcccccccd

08001038 <SCH_Update>:
	}

	end = (end - 1 + SCH_MAX_TASKS) % SCH_MAX_TASKS;
}

void SCH_Update(void){
 8001038:	b490      	push	{r4, r7}
 800103a:	af00      	add	r7, sp, #0
	if (start != end && SCH_tasks_G[start].isRun == 1){
 800103c:	4b3c      	ldr	r3, [pc, #240]	@ (8001130 <SCH_Update+0xf8>)
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	4b3c      	ldr	r3, [pc, #240]	@ (8001134 <SCH_Update+0xfc>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d06f      	beq.n	8001128 <SCH_Update+0xf0>
 8001048:	4b39      	ldr	r3, [pc, #228]	@ (8001130 <SCH_Update+0xf8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4a3a      	ldr	r2, [pc, #232]	@ (8001138 <SCH_Update+0x100>)
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	4413      	add	r3, r2
 8001052:	330d      	adds	r3, #13
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d166      	bne.n	8001128 <SCH_Update+0xf0>
		if (SCH_tasks_G[start].Delay > 0){
 800105a:	4b35      	ldr	r3, [pc, #212]	@ (8001130 <SCH_Update+0xf8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4a36      	ldr	r2, [pc, #216]	@ (8001138 <SCH_Update+0x100>)
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4413      	add	r3, r2
 8001064:	3304      	adds	r3, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00d      	beq.n	8001088 <SCH_Update+0x50>
			SCH_tasks_G[start].Delay--;
 800106c:	4b30      	ldr	r3, [pc, #192]	@ (8001130 <SCH_Update+0xf8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4931      	ldr	r1, [pc, #196]	@ (8001138 <SCH_Update+0x100>)
 8001072:	011a      	lsls	r2, r3, #4
 8001074:	440a      	add	r2, r1
 8001076:	3204      	adds	r2, #4
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	3a01      	subs	r2, #1
 800107c:	492e      	ldr	r1, [pc, #184]	@ (8001138 <SCH_Update+0x100>)
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	440b      	add	r3, r1
 8001082:	3304      	adds	r3, #4
 8001084:	601a      	str	r2, [r3, #0]
				end = (end + 1) % SCH_MAX_TASKS;
			}
			start = (start + 1) % SCH_MAX_TASKS;
		}
	}
}
 8001086:	e04f      	b.n	8001128 <SCH_Update+0xf0>
			SCH_tasks_G[start].RunMe = 1;
 8001088:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <SCH_Update+0xf8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <SCH_Update+0x100>)
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	330c      	adds	r3, #12
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[start].Period > 0){
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <SCH_Update+0xf8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <SCH_Update+0x100>)
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	3308      	adds	r3, #8
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d02e      	beq.n	8001108 <SCH_Update+0xd0>
				SCH_tasks_G[start].Delay = SCH_tasks_G[start].Period;
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <SCH_Update+0xf8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <SCH_Update+0xf8>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	4a20      	ldr	r2, [pc, #128]	@ (8001138 <SCH_Update+0x100>)
 80010b8:	010b      	lsls	r3, r1, #4
 80010ba:	4413      	add	r3, r2
 80010bc:	3308      	adds	r3, #8
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	491d      	ldr	r1, [pc, #116]	@ (8001138 <SCH_Update+0x100>)
 80010c2:	0103      	lsls	r3, r0, #4
 80010c4:	440b      	add	r3, r1
 80010c6:	3304      	adds	r3, #4
 80010c8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[end] = SCH_tasks_G[start];
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <SCH_Update+0xf8>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <SCH_Update+0xfc>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <SCH_Update+0x100>)
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	18d1      	adds	r1, r2, r3
 80010da:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <SCH_Update+0x100>)
 80010dc:	0103      	lsls	r3, r0, #4
 80010de:	4413      	add	r3, r2
 80010e0:	460c      	mov	r4, r1
 80010e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				end = (end + 1) % SCH_MAX_TASKS;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <SCH_Update+0xfc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <SCH_Update+0x104>)
 80010f0:	fb83 1302 	smull	r1, r3, r3, r2
 80010f4:	1059      	asrs	r1, r3, #1
 80010f6:	17d3      	asrs	r3, r2, #31
 80010f8:	1ac9      	subs	r1, r1, r3
 80010fa:	460b      	mov	r3, r1
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	1ad1      	subs	r1, r2, r3
 8001102:	b2ca      	uxtb	r2, r1
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <SCH_Update+0xfc>)
 8001106:	701a      	strb	r2, [r3, #0]
			start = (start + 1) % SCH_MAX_TASKS;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <SCH_Update+0xf8>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <SCH_Update+0x104>)
 8001110:	fb83 1302 	smull	r1, r3, r3, r2
 8001114:	1059      	asrs	r1, r3, #1
 8001116:	17d3      	asrs	r3, r2, #31
 8001118:	1ac9      	subs	r1, r1, r3
 800111a:	460b      	mov	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	1ad1      	subs	r1, r2, r3
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	4b02      	ldr	r3, [pc, #8]	@ (8001130 <SCH_Update+0xf8>)
 8001126:	701a      	strb	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc90      	pop	{r4, r7}
 800112e:	4770      	bx	lr
 8001130:	200001c8 	.word	0x200001c8
 8001134:	200001c9 	.word	0x200001c9
 8001138:	20000178 	.word	0x20000178
 800113c:	66666667 	.word	0x66666667

08001140 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	if (SCH_tasks_G[start].RunMe > 0 && start != end && SCH_tasks_G[start].isRun == 1){
 8001144:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <SCH_Dispatch_Tasks+0x8c>)
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4413      	add	r3, r2
 800114e:	330c      	adds	r3, #12
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d036      	beq.n	80011c4 <SCH_Dispatch_Tasks+0x84>
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <SCH_Dispatch_Tasks+0x90>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d030      	beq.n	80011c4 <SCH_Dispatch_Tasks+0x84>
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <SCH_Dispatch_Tasks+0x8c>)
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	330d      	adds	r3, #13
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d127      	bne.n	80011c4 <SCH_Dispatch_Tasks+0x84>
		SCH_tasks_G[start].RunMe = 0;
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4a14      	ldr	r2, [pc, #80]	@ (80011cc <SCH_Dispatch_Tasks+0x8c>)
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	330c      	adds	r3, #12
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]

		(*SCH_tasks_G[start].pTask)();
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <SCH_Dispatch_Tasks+0x8c>)
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4798      	blx	r3

		if (SCH_tasks_G[start].Period == 0) {
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <SCH_Dispatch_Tasks+0x8c>)
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	4413      	add	r3, r2
 800119c:	3308      	adds	r3, #8
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10f      	bne.n	80011c4 <SCH_Dispatch_Tasks+0x84>
		    start = (start + 1) % SCH_MAX_TASKS;
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <SCH_Dispatch_Tasks+0x94>)
 80011ac:	fb83 1302 	smull	r1, r3, r3, r2
 80011b0:	1059      	asrs	r1, r3, #1
 80011b2:	17d3      	asrs	r3, r2, #31
 80011b4:	1ac9      	subs	r1, r1, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	1ad1      	subs	r1, r2, r3
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	4b01      	ldr	r3, [pc, #4]	@ (80011c8 <SCH_Dispatch_Tasks+0x88>)
 80011c2:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200001c8 	.word	0x200001c8
 80011cc:	20000178 	.word	0x20000178
 80011d0:	200001c9 	.word	0x200001c9
 80011d4:	66666667 	.word	0x66666667

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_MspInit+0x5c>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a14      	ldr	r2, [pc, #80]	@ (8001234 <HAL_MspInit+0x5c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_MspInit+0x5c>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <HAL_MspInit+0x5c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <HAL_MspInit+0x60>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	4a04      	ldr	r2, [pc, #16]	@ (8001238 <HAL_MspInit+0x60>)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000

0800123c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a1e      	ldr	r2, [pc, #120]	@ (80012d0 <HAL_I2C_MspInit+0x94>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d134      	bne.n	80012c6 <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_I2C_MspInit+0x98>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <HAL_I2C_MspInit+0x98>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <HAL_I2C_MspInit+0x98>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001274:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4812      	ldr	r0, [pc, #72]	@ (80012d8 <HAL_I2C_MspInit+0x9c>)
 800128e:	f000 fb2b 	bl	80018e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <HAL_I2C_MspInit+0xa0>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a8:	4a0c      	ldr	r2, [pc, #48]	@ (80012dc <HAL_I2C_MspInit+0xa0>)
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_I2C_MspInit+0x98>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_I2C_MspInit+0x98>)
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_I2C_MspInit+0x98>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	@ 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	40010000 	.word	0x40010000

080012e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f0:	d113      	bne.n	800131a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <HAL_TIM_Base_MspInit+0x44>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_TIM_Base_MspInit+0x44>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_TIM_Base_MspInit+0x44>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	201c      	movs	r0, #28
 8001310:	f000 fa01 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001314:	201c      	movs	r0, #28
 8001316:	f000 fa1a 	bl	800174e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <HAL_UART_MspInit+0x98>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d137      	bne.n	80013b8 <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001348:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <HAL_UART_MspInit+0x9c>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	4a1d      	ldr	r2, [pc, #116]	@ (80013c4 <HAL_UART_MspInit+0x9c>)
 800134e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001352:	61d3      	str	r3, [r2, #28]
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HAL_UART_MspInit+0x9c>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_UART_MspInit+0x9c>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a17      	ldr	r2, [pc, #92]	@ (80013c4 <HAL_UART_MspInit+0x9c>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_UART_MspInit+0x9c>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001378:	2304      	movs	r3, #4
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	480f      	ldr	r0, [pc, #60]	@ (80013c8 <HAL_UART_MspInit+0xa0>)
 800138c:	f000 faac 	bl	80018e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001390:	2308      	movs	r3, #8
 8001392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	4619      	mov	r1, r3
 80013a2:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <HAL_UART_MspInit+0xa0>)
 80013a4:	f000 faa0 	bl	80018e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2026      	movs	r0, #38	@ 0x26
 80013ae:	f000 f9b2 	bl	8001716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b2:	2026      	movs	r0, #38	@ 0x26
 80013b4:	f000 f9cb 	bl	800174e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 f888 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <TIM2_IRQHandler+0x10>)
 800142a:	f001 fd69 	bl	8002f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200000e8 	.word	0x200000e8

08001438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <USART2_IRQHandler+0x10>)
 800143e:	f002 f8ef 	bl	8003620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000130 	.word	0x20000130

0800144c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001458:	f7ff fff8 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145e:	490c      	ldr	r1, [pc, #48]	@ (8001490 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001460:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a09      	ldr	r2, [pc, #36]	@ (8001498 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001474:	4c09      	ldr	r4, [pc, #36]	@ (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001482:	f002 fdb7 	bl	8003ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001486:	f7ff fb91 	bl	8000bac <main>
  bx lr
 800148a:	4770      	bx	lr
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001494:	08004088 	.word	0x08004088
  ldr r2, =_sbss
 8001498:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800149c:	200001d0 	.word	0x200001d0

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>
	...

080014a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_Init+0x28>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	@ (80014cc <HAL_Init+0x28>)
 80014ae:	f043 0310 	orr.w	r3, r3, #16
 80014b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f923 	bl	8001700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	200f      	movs	r0, #15
 80014bc:	f000 f808 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fe8a 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f93b 	bl	800176a <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f903 	bl	8001716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	@ (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000040 	.word	0x20000040
 8001528:	20000048 	.word	0x20000048
 800152c:	20000044 	.word	0x20000044

08001530 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_IncTick+0x1c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_IncTick+0x20>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a03      	ldr	r2, [pc, #12]	@ (8001550 <HAL_IncTick+0x20>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	20000048 	.word	0x20000048
 8001550:	200001cc 	.word	0x200001cc

08001554 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <HAL_GetTick+0x10>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200001cc 	.word	0x200001cc

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4906      	ldr	r1, [pc, #24]	@ (8001600 <__NVIC_EnableIRQ+0x34>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	@ (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	@ (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	@ 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016cc:	d301      	bcc.n	80016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00f      	b.n	80016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <SysTick_Config+0x40>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016da:	210f      	movs	r1, #15
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f7ff ff90 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <SysTick_Config+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <SysTick_Config+0x40>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff2d 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001728:	f7ff ff42 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 800172c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff ff90 	bl	8001658 <NVIC_EncodePriority>
 8001738:	4602      	mov	r2, r0
 800173a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff5f 	bl	8001604 <__NVIC_SetPriority>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff35 	bl	80015cc <__NVIC_EnableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffa2 	bl	80016bc <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d008      	beq.n	80017ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2204      	movs	r2, #4
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e020      	b.n	80017ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 020e 	bic.w	r2, r2, #14
 80017ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d4:	2101      	movs	r1, #1
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d005      	beq.n	800181c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2204      	movs	r2, #4
 8001814:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
 800181a:	e051      	b.n	80018c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 020e 	bic.w	r2, r2, #14
 800182a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0201 	bic.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a22      	ldr	r2, [pc, #136]	@ (80018cc <HAL_DMA_Abort_IT+0xd4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d029      	beq.n	800189a <HAL_DMA_Abort_IT+0xa2>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <HAL_DMA_Abort_IT+0xd8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <HAL_DMA_Abort_IT+0x9e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <HAL_DMA_Abort_IT+0xdc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01a      	beq.n	8001890 <HAL_DMA_Abort_IT+0x98>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <HAL_DMA_Abort_IT+0xe0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d012      	beq.n	800188a <HAL_DMA_Abort_IT+0x92>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <HAL_DMA_Abort_IT+0xe4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00a      	beq.n	8001884 <HAL_DMA_Abort_IT+0x8c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <HAL_DMA_Abort_IT+0xe8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <HAL_DMA_Abort_IT+0x86>
 8001878:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800187c:	e00e      	b.n	800189c <HAL_DMA_Abort_IT+0xa4>
 800187e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001882:	e00b      	b.n	800189c <HAL_DMA_Abort_IT+0xa4>
 8001884:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001888:	e008      	b.n	800189c <HAL_DMA_Abort_IT+0xa4>
 800188a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188e:	e005      	b.n	800189c <HAL_DMA_Abort_IT+0xa4>
 8001890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001894:	e002      	b.n	800189c <HAL_DMA_Abort_IT+0xa4>
 8001896:	2310      	movs	r3, #16
 8001898:	e000      	b.n	800189c <HAL_DMA_Abort_IT+0xa4>
 800189a:	2301      	movs	r3, #1
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_DMA_Abort_IT+0xec>)
 800189e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
    } 
  }
  return status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020008 	.word	0x40020008
 80018d0:	4002001c 	.word	0x4002001c
 80018d4:	40020030 	.word	0x40020030
 80018d8:	40020044 	.word	0x40020044
 80018dc:	40020058 	.word	0x40020058
 80018e0:	4002006c 	.word	0x4002006c
 80018e4:	40020000 	.word	0x40020000

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b08b      	sub	sp, #44	@ 0x2c
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fa:	e161      	b.n	8001bc0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018fc:	2201      	movs	r2, #1
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8150 	bne.w	8001bba <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4a97      	ldr	r2, [pc, #604]	@ (8001b7c <HAL_GPIO_Init+0x294>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d05e      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001924:	4a95      	ldr	r2, [pc, #596]	@ (8001b7c <HAL_GPIO_Init+0x294>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d875      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800192a:	4a95      	ldr	r2, [pc, #596]	@ (8001b80 <HAL_GPIO_Init+0x298>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d058      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001930:	4a93      	ldr	r2, [pc, #588]	@ (8001b80 <HAL_GPIO_Init+0x298>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d86f      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001936:	4a93      	ldr	r2, [pc, #588]	@ (8001b84 <HAL_GPIO_Init+0x29c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d052      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 800193c:	4a91      	ldr	r2, [pc, #580]	@ (8001b84 <HAL_GPIO_Init+0x29c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d869      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001942:	4a91      	ldr	r2, [pc, #580]	@ (8001b88 <HAL_GPIO_Init+0x2a0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d04c      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001948:	4a8f      	ldr	r2, [pc, #572]	@ (8001b88 <HAL_GPIO_Init+0x2a0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d863      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800194e:	4a8f      	ldr	r2, [pc, #572]	@ (8001b8c <HAL_GPIO_Init+0x2a4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d046      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
 8001954:	4a8d      	ldr	r2, [pc, #564]	@ (8001b8c <HAL_GPIO_Init+0x2a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d85d      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 800195a:	2b12      	cmp	r3, #18
 800195c:	d82a      	bhi.n	80019b4 <HAL_GPIO_Init+0xcc>
 800195e:	2b12      	cmp	r3, #18
 8001960:	d859      	bhi.n	8001a16 <HAL_GPIO_Init+0x12e>
 8001962:	a201      	add	r2, pc, #4	@ (adr r2, 8001968 <HAL_GPIO_Init+0x80>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	080019e3 	.word	0x080019e3
 800196c:	080019bd 	.word	0x080019bd
 8001970:	080019cf 	.word	0x080019cf
 8001974:	08001a11 	.word	0x08001a11
 8001978:	08001a17 	.word	0x08001a17
 800197c:	08001a17 	.word	0x08001a17
 8001980:	08001a17 	.word	0x08001a17
 8001984:	08001a17 	.word	0x08001a17
 8001988:	08001a17 	.word	0x08001a17
 800198c:	08001a17 	.word	0x08001a17
 8001990:	08001a17 	.word	0x08001a17
 8001994:	08001a17 	.word	0x08001a17
 8001998:	08001a17 	.word	0x08001a17
 800199c:	08001a17 	.word	0x08001a17
 80019a0:	08001a17 	.word	0x08001a17
 80019a4:	08001a17 	.word	0x08001a17
 80019a8:	08001a17 	.word	0x08001a17
 80019ac:	080019c5 	.word	0x080019c5
 80019b0:	080019d9 	.word	0x080019d9
 80019b4:	4a76      	ldr	r2, [pc, #472]	@ (8001b90 <HAL_GPIO_Init+0x2a8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d013      	beq.n	80019e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ba:	e02c      	b.n	8001a16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	623b      	str	r3, [r7, #32]
          break;
 80019c2:	e029      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	3304      	adds	r3, #4
 80019ca:	623b      	str	r3, [r7, #32]
          break;
 80019cc:	e024      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	3308      	adds	r3, #8
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e01f      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	330c      	adds	r3, #12
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e01a      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ea:	2304      	movs	r3, #4
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e013      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f8:	2308      	movs	r3, #8
 80019fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	611a      	str	r2, [r3, #16]
          break;
 8001a02:	e009      	b.n	8001a18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a04:	2308      	movs	r3, #8
 8001a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	615a      	str	r2, [r3, #20]
          break;
 8001a0e:	e003      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e000      	b.n	8001a18 <HAL_GPIO_Init+0x130>
          break;
 8001a16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	@ 0xff
 8001a1c:	d801      	bhi.n	8001a22 <HAL_GPIO_Init+0x13a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	e001      	b.n	8001a26 <HAL_GPIO_Init+0x13e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3304      	adds	r3, #4
 8001a26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2bff      	cmp	r3, #255	@ 0xff
 8001a2c:	d802      	bhi.n	8001a34 <HAL_GPIO_Init+0x14c>
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x152>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	3b08      	subs	r3, #8
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	210f      	movs	r1, #15
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	6a39      	ldr	r1, [r7, #32]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80a9 	beq.w	8001bba <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a68:	4b4a      	ldr	r3, [pc, #296]	@ (8001b94 <HAL_GPIO_Init+0x2ac>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a49      	ldr	r2, [pc, #292]	@ (8001b94 <HAL_GPIO_Init+0x2ac>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b47      	ldr	r3, [pc, #284]	@ (8001b94 <HAL_GPIO_Init+0x2ac>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a80:	4a45      	ldr	r2, [pc, #276]	@ (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	089b      	lsrs	r3, r3, #2
 8001a86:	3302      	adds	r3, #2
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8001b9c <HAL_GPIO_Init+0x2b4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1e0>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3c      	ldr	r2, [pc, #240]	@ (8001ba0 <HAL_GPIO_Init+0x2b8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1dc>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ba4 <HAL_GPIO_Init+0x2bc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1d8>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e004      	b.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e002      	b.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001acc:	f002 0203 	and.w	r2, r2, #3
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	4093      	lsls	r3, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ada:	492f      	ldr	r1, [pc, #188]	@ (8001b98 <HAL_GPIO_Init+0x2b0>)
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	492b      	ldr	r1, [pc, #172]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	608b      	str	r3, [r1, #8]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4927      	ldr	r1, [pc, #156]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	4921      	ldr	r1, [pc, #132]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60cb      	str	r3, [r1, #12]
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	491d      	ldr	r1, [pc, #116]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b44:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4917      	ldr	r1, [pc, #92]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4913      	ldr	r1, [pc, #76]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01f      	beq.n	8001bac <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <HAL_GPIO_Init+0x2c0>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e01f      	b.n	8001bba <HAL_GPIO_Init+0x2d2>
 8001b7a:	bf00      	nop
 8001b7c:	10320000 	.word	0x10320000
 8001b80:	10310000 	.word	0x10310000
 8001b84:	10220000 	.word	0x10220000
 8001b88:	10210000 	.word	0x10210000
 8001b8c:	10120000 	.word	0x10120000
 8001b90:	10110000 	.word	0x10110000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_GPIO_Init+0x2f4>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4909      	ldr	r1, [pc, #36]	@ (8001bdc <HAL_GPIO_Init+0x2f4>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f ae96 	bne.w	80018fc <HAL_GPIO_Init+0x14>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	372c      	adds	r7, #44	@ 0x2c
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40010400 	.word	0x40010400

08001be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e001      	b.n	8001c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	460b      	mov	r3, r1
 8001c18:	807b      	strh	r3, [r7, #2]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c1e:	787b      	ldrb	r3, [r7, #1]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c24:	887a      	ldrh	r2, [r7, #2]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c2a:	e003      	b.n	8001c34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	041a      	lsls	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	611a      	str	r2, [r3, #16]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c50:	887a      	ldrh	r2, [r7, #2]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4013      	ands	r3, r2
 8001c56:	041a      	lsls	r2, r3, #16
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	400b      	ands	r3, r1
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	611a      	str	r2, [r3, #16]
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e12b      	b.n	8001eda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fad0 	bl	800123c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2224      	movs	r2, #36	@ 0x24
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cd4:	f001 f832 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8001cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4a81      	ldr	r2, [pc, #516]	@ (8001ee4 <HAL_I2C_Init+0x274>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d807      	bhi.n	8001cf4 <HAL_I2C_Init+0x84>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4a80      	ldr	r2, [pc, #512]	@ (8001ee8 <HAL_I2C_Init+0x278>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	bf94      	ite	ls
 8001cec:	2301      	movls	r3, #1
 8001cee:	2300      	movhi	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e006      	b.n	8001d02 <HAL_I2C_Init+0x92>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a7d      	ldr	r2, [pc, #500]	@ (8001eec <HAL_I2C_Init+0x27c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	bf94      	ite	ls
 8001cfc:	2301      	movls	r3, #1
 8001cfe:	2300      	movhi	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0e7      	b.n	8001eda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4a78      	ldr	r2, [pc, #480]	@ (8001ef0 <HAL_I2C_Init+0x280>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0c9b      	lsrs	r3, r3, #18
 8001d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a6a      	ldr	r2, [pc, #424]	@ (8001ee4 <HAL_I2C_Init+0x274>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d802      	bhi.n	8001d44 <HAL_I2C_Init+0xd4>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3301      	adds	r3, #1
 8001d42:	e009      	b.n	8001d58 <HAL_I2C_Init+0xe8>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d4a:	fb02 f303 	mul.w	r3, r2, r3
 8001d4e:	4a69      	ldr	r2, [pc, #420]	@ (8001ef4 <HAL_I2C_Init+0x284>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	3301      	adds	r3, #1
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	495c      	ldr	r1, [pc, #368]	@ (8001ee4 <HAL_I2C_Init+0x274>)
 8001d74:	428b      	cmp	r3, r1
 8001d76:	d819      	bhi.n	8001dac <HAL_I2C_Init+0x13c>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e59      	subs	r1, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d86:	1c59      	adds	r1, r3, #1
 8001d88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <HAL_I2C_Init+0x138>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1e59      	subs	r1, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da6:	e051      	b.n	8001e4c <HAL_I2C_Init+0x1dc>
 8001da8:	2304      	movs	r3, #4
 8001daa:	e04f      	b.n	8001e4c <HAL_I2C_Init+0x1dc>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d111      	bne.n	8001dd8 <HAL_I2C_Init+0x168>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1e58      	subs	r0, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	440b      	add	r3, r1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e012      	b.n	8001dfe <HAL_I2C_Init+0x18e>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1e58      	subs	r0, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	0099      	lsls	r1, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dee:	3301      	adds	r3, #1
 8001df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Init+0x196>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e022      	b.n	8001e4c <HAL_I2C_Init+0x1dc>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10e      	bne.n	8001e2c <HAL_I2C_Init+0x1bc>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e58      	subs	r0, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	440b      	add	r3, r1
 8001e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e2a:	e00f      	b.n	8001e4c <HAL_I2C_Init+0x1dc>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1e58      	subs	r0, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	0099      	lsls	r1, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	6809      	ldr	r1, [r1, #0]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6911      	ldr	r1, [r2, #16]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68d2      	ldr	r2, [r2, #12]
 8001e86:	4311      	orrs	r1, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	000186a0 	.word	0x000186a0
 8001ee8:	001e847f 	.word	0x001e847f
 8001eec:	003d08ff 	.word	0x003d08ff
 8001ef0:	431bde83 	.word	0x431bde83
 8001ef4:	10624dd3 	.word	0x10624dd3

08001ef8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	460b      	mov	r3, r1
 8001f06:	817b      	strh	r3, [r7, #10]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff fb22 	bl	8001554 <HAL_GetTick>
 8001f10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	f040 80e0 	bne.w	80020e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2319      	movs	r3, #25
 8001f26:	2201      	movs	r2, #1
 8001f28:	4970      	ldr	r1, [pc, #448]	@ (80020ec <HAL_I2C_Master_Transmit+0x1f4>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f964 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
 8001f38:	e0d3      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_I2C_Master_Transmit+0x50>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e0cc      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x1ea>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d007      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2221      	movs	r2, #33	@ 0x21
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2210      	movs	r2, #16
 8001f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	893a      	ldrh	r2, [r7, #8]
 8001f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4a50      	ldr	r2, [pc, #320]	@ (80020f0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fb0:	8979      	ldrh	r1, [r7, #10]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6a3a      	ldr	r2, [r7, #32]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f89c 	bl	80020f4 <I2C_MasterRequestWrite>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e08d      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fdc:	e066      	b.n	80020ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 fa22 	bl	800242c <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00d      	beq.n	800200a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d107      	bne.n	8002006 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002004:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06b      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	781a      	ldrb	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b04      	cmp	r3, #4
 8002046:	d11b      	bne.n	8002080 <HAL_I2C_Master_Transmit+0x188>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	d017      	beq.n	8002080 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	6a39      	ldr	r1, [r7, #32]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fa19 	bl	80024bc <I2C_WaitOnBTFFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00d      	beq.n	80020ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	2b04      	cmp	r3, #4
 8002096:	d107      	bne.n	80020a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e01a      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d194      	bne.n	8001fde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	00100002 	.word	0x00100002
 80020f0:	ffff0000 	.word	0xffff0000

080020f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	460b      	mov	r3, r1
 8002102:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002108:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b08      	cmp	r3, #8
 800210e:	d006      	beq.n	800211e <I2C_MasterRequestWrite+0x2a>
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d003      	beq.n	800211e <I2C_MasterRequestWrite+0x2a>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800211c:	d108      	bne.n	8002130 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e00b      	b.n	8002148 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	2b12      	cmp	r3, #18
 8002136:	d107      	bne.n	8002148 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f84f 	bl	80021f8 <I2C_WaitOnFlagUntilTimeout>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00d      	beq.n	800217c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800216e:	d103      	bne.n	8002178 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e035      	b.n	80021e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002184:	d108      	bne.n	8002198 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002186:	897b      	ldrh	r3, [r7, #10]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002194:	611a      	str	r2, [r3, #16]
 8002196:	e01b      	b.n	80021d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002198:	897b      	ldrh	r3, [r7, #10]
 800219a:	11db      	asrs	r3, r3, #7
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f003 0306 	and.w	r3, r3, #6
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f063 030f 	orn	r3, r3, #15
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	490e      	ldr	r1, [pc, #56]	@ (80021f0 <I2C_MasterRequestWrite+0xfc>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f898 	bl	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e010      	b.n	80021e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4907      	ldr	r1, [pc, #28]	@ (80021f4 <I2C_MasterRequestWrite+0x100>)
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f888 	bl	80022ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	00010008 	.word	0x00010008
 80021f4:	00010002 	.word	0x00010002

080021f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002208:	e048      	b.n	800229c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d044      	beq.n	800229c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	f7ff f99f 	bl	8001554 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d302      	bcc.n	8002228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d139      	bne.n	800229c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	0c1b      	lsrs	r3, r3, #16
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10d      	bne.n	800224e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	43da      	mvns	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4013      	ands	r3, r2
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	e00c      	b.n	8002268 <I2C_WaitOnFlagUntilTimeout+0x70>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	43da      	mvns	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	429a      	cmp	r2, r3
 800226c:	d116      	bne.n	800229c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e023      	b.n	80022e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10d      	bne.n	80022c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	e00c      	b.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4013      	ands	r3, r2
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d093      	beq.n	800220a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022fa:	e071      	b.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800230a:	d123      	bne.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800231a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f043 0204 	orr.w	r2, r3, #4
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e067      	b.n	8002424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d041      	beq.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235c:	f7ff f8fa 	bl	8001554 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	d302      	bcc.n	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d136      	bne.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10c      	bne.n	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4013      	ands	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf14      	ite	ne
 800238e:	2301      	movne	r3, #1
 8002390:	2300      	moveq	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	e00b      	b.n	80023ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	43da      	mvns	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4013      	ands	r3, r2
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e021      	b.n	8002424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10c      	bne.n	8002404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e00b      	b.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4013      	ands	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f af6d 	bne.w	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002438:	e034      	b.n	80024a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f886 	bl	800254c <I2C_IsAcknowledgeFailed>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e034      	b.n	80024b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d028      	beq.n	80024a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7ff f87f 	bl	8001554 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11d      	bne.n	80024a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002472:	2b80      	cmp	r3, #128	@ 0x80
 8002474:	d016      	beq.n	80024a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	f043 0220 	orr.w	r2, r3, #32
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e007      	b.n	80024b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ae:	2b80      	cmp	r3, #128	@ 0x80
 80024b0:	d1c3      	bne.n	800243a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024c8:	e034      	b.n	8002534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f83e 	bl	800254c <I2C_IsAcknowledgeFailed>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e034      	b.n	8002544 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e0:	d028      	beq.n	8002534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7ff f837 	bl	8001554 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11d      	bne.n	8002534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b04      	cmp	r3, #4
 8002504:	d016      	beq.n	8002534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e007      	b.n	8002544 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d1c3      	bne.n	80024ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002562:	d11b      	bne.n	800259c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800256c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e272      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b92      	ldr	r3, [pc, #584]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
 80025e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x12c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e24c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x76>
 8002610:	4b80      	ldr	r3, [pc, #512]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7f      	ldr	r2, [pc, #508]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b78      	ldr	r3, [pc, #480]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xbc>
 800264a:	4b72      	ldr	r3, [pc, #456]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a71      	ldr	r2, [pc, #452]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6f      	ldr	r3, [pc, #444]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002664:	4b6b      	ldr	r3, [pc, #428]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b68      	ldr	r3, [pc, #416]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a67      	ldr	r2, [pc, #412]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe ff66 	bl	8001554 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe ff62 	bl	8001554 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	@ 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e200      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5d      	ldr	r3, [pc, #372]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe4>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe ff52 	bl	8001554 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe ff4e 	bl	8001554 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	@ 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1ec      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x10c>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ee:	4b49      	ldr	r3, [pc, #292]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
 80026fa:	4b46      	ldr	r3, [pc, #280]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b43      	ldr	r3, [pc, #268]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c0      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3d      	ldr	r3, [pc, #244]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4939      	ldr	r1, [pc, #228]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <HAL_RCC_OscConfig+0x270>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe ff07 	bl	8001554 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe ff03 	bl	8001554 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2d      	ldr	r3, [pc, #180]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4927      	ldr	r1, [pc, #156]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <HAL_RCC_OscConfig+0x270>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fee6 	bl	8001554 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fee2 	bl	8001554 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e180      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03a      	beq.n	800282c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_RCC_OscConfig+0x274>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fec6 	bl	8001554 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe fec2 	bl	8001554 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e160      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 face 	bl	8002d8c <RCC_Delay>
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_RCC_OscConfig+0x274>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7fe feac 	bl	8001554 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe fea8 	bl	8001554 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e146      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	42420000 	.word	0x42420000
 800281c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b92      	ldr	r3, [pc, #584]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e9      	bne.n	8002800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a6 	beq.w	8002986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a87      	ldr	r2, [pc, #540]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b85      	ldr	r3, [pc, #532]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b82      	ldr	r3, [pc, #520]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b7f      	ldr	r3, [pc, #508]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7e      	ldr	r2, [pc, #504]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fe69 	bl	8001554 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fe65 	bl	8001554 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	@ 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e103      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x334>
 80028c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a69      	ldr	r2, [pc, #420]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b67      	ldr	r3, [pc, #412]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a66      	ldr	r2, [pc, #408]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x356>
 80028e4:	4b61      	ldr	r3, [pc, #388]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a60      	ldr	r2, [pc, #384]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028fe:	4b5b      	ldr	r3, [pc, #364]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a5a      	ldr	r2, [pc, #360]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b58      	ldr	r3, [pc, #352]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a57      	ldr	r2, [pc, #348]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fe19 	bl	8001554 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fe15 	bl	8001554 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0b1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x37e>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe fe03 	bl	8001554 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fdff 	bl	8001554 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e09b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a3b      	ldr	r2, [pc, #236]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8087 	beq.w	8002a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d061      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fdd3 	bl	8001554 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fdcf 	bl	8001554 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e06d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4921      	ldr	r1, [pc, #132]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a19      	ldr	r1, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	430b      	orrs	r3, r1
 80029fe:	491b      	ldr	r1, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fda3 	bl	8001554 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe fd9f 	bl	8001554 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e03d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
 8002a30:	e035      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fd8c 	bl	8001554 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fd88 	bl	8001554 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e026      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x498>
 8002a5e:	e01e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e019      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <HAL_RCC_OscConfig+0x500>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d0      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b67      	ldr	r3, [pc, #412]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4965      	ldr	r1, [pc, #404]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d040      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e073      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06b      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4936      	ldr	r1, [pc, #216]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fcda 	bl	8001554 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7fe fcd6 	bl	8001554 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e053      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d210      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4922      	ldr	r1, [pc, #136]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	@ (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_RCC_ClockConfig+0x1cc>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_ClockConfig+0x1d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fc38 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08004054 	.word	0x08004054
 8002c78:	20000040 	.word	0x20000040
 8002c7c:	20000044 	.word	0x20000044

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cae:	e027      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	e027      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a17      	ldr	r2, [pc, #92]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0c5b      	lsrs	r3, r3, #17
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	4a11      	ldr	r2, [pc, #68]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e004      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d02:	613b      	str	r3, [r7, #16]
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	693b      	ldr	r3, [r7, #16]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	007a1200 	.word	0x007a1200
 8002d1c:	0800406c 	.word	0x0800406c
 8002d20:	0800407c 	.word	0x0800407c
 8002d24:	003d0900 	.word	0x003d0900

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b02      	ldr	r3, [pc, #8]	@ (8002d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	20000040 	.word	0x20000040

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff2 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	@ (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08004064 	.word	0x08004064

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0adb      	lsrs	r3, r3, #11
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	@ (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08004064 	.word	0x08004064

08002d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <RCC_Delay+0x34>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <RCC_Delay+0x38>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0a5b      	lsrs	r3, r3, #9
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da8:	bf00      	nop
  }
  while (Delay --);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f9      	bne.n	8002da8 <RCC_Delay+0x1c>
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000040 	.word	0x20000040
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e041      	b.n	8002e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fa76 	bl	80012e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 fa56 	bl	80032b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d001      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e035      	b.n	8002eec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a16      	ldr	r2, [pc, #88]	@ (8002ef8 <HAL_TIM_Base_Start_IT+0x90>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_TIM_Base_Start_IT+0x4e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIM_Base_Start_IT+0x4e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a12      	ldr	r2, [pc, #72]	@ (8002efc <HAL_TIM_Base_Start_IT+0x94>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d111      	bne.n	8002eda <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d010      	beq.n	8002eea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	e007      	b.n	8002eea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400

08002f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d020      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01b      	beq.n	8002f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0202 	mvn.w	r2, #2
 8002f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f998 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f98b 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f99a 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0204 	mvn.w	r2, #4
 8002f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f972 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f965 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f974 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0208 	mvn.w	r2, #8
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f94c 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f93f 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f94e 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0210 	mvn.w	r2, #16
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2208      	movs	r2, #8
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f926 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f919 	bl	800326e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f928 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0201 	mvn.w	r2, #1
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd ff0a 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fa6f 	bl	800356e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8f8 	bl	80032a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0320 	and.w	r3, r3, #32
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0220 	mvn.w	r2, #32
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa42 	bl	800355c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIM_ConfigClockSource+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0b4      	b.n	8003266 <HAL_TIM_ConfigClockSource+0x186>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800311a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003134:	d03e      	beq.n	80031b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800313a:	f200 8087 	bhi.w	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003142:	f000 8086 	beq.w	8003252 <HAL_TIM_ConfigClockSource+0x172>
 8003146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314a:	d87f      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b70      	cmp	r3, #112	@ 0x70
 800314e:	d01a      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0xa6>
 8003150:	2b70      	cmp	r3, #112	@ 0x70
 8003152:	d87b      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b60      	cmp	r3, #96	@ 0x60
 8003156:	d050      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0x11a>
 8003158:	2b60      	cmp	r3, #96	@ 0x60
 800315a:	d877      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b50      	cmp	r3, #80	@ 0x50
 800315e:	d03c      	beq.n	80031da <HAL_TIM_ConfigClockSource+0xfa>
 8003160:	2b50      	cmp	r3, #80	@ 0x50
 8003162:	d873      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	d058      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x13a>
 8003168:	2b40      	cmp	r3, #64	@ 0x40
 800316a:	d86f      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b30      	cmp	r3, #48	@ 0x30
 800316e:	d064      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003170:	2b30      	cmp	r3, #48	@ 0x30
 8003172:	d86b      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d060      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003178:	2b20      	cmp	r3, #32
 800317a:	d867      	bhi.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d05c      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	2b10      	cmp	r3, #16
 8003182:	d05a      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x15a>
 8003184:	e062      	b.n	800324c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003196:	f000 f96a 	bl	800346e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	609a      	str	r2, [r3, #8]
      break;
 80031b2:	e04f      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c4:	f000 f953 	bl	800346e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031d6:	609a      	str	r2, [r3, #8]
      break;
 80031d8:	e03c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e6:	461a      	mov	r2, r3
 80031e8:	f000 f8ca 	bl	8003380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2150      	movs	r1, #80	@ 0x50
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f921 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 80031f8:	e02c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003206:	461a      	mov	r2, r3
 8003208:	f000 f8e8 	bl	80033dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2160      	movs	r1, #96	@ 0x60
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f911 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 8003218:	e01c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	461a      	mov	r2, r3
 8003228:	f000 f8aa 	bl	8003380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2140      	movs	r1, #64	@ 0x40
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f901 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 8003238:	e00c      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f000 f8f8 	bl	800343a <TIM_ITRx_SetConfig>
      break;
 800324a:	e003      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e000      	b.n	8003254 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
	...

080032b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003378 <TIM_Base_SetConfig+0xc0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <TIM_Base_SetConfig+0x28>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0x28>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a28      	ldr	r2, [pc, #160]	@ (800337c <TIM_Base_SetConfig+0xc4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a20      	ldr	r2, [pc, #128]	@ (8003378 <TIM_Base_SetConfig+0xc0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x52>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x52>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a1d      	ldr	r2, [pc, #116]	@ (800337c <TIM_Base_SetConfig+0xc4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <TIM_Base_SetConfig+0xc0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]
  }
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40000400 	.word	0x40000400

08003380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	f023 0201 	bic.w	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 030a 	bic.w	r3, r3, #10
 80033bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	f023 0210 	bic.w	r2, r3, #16
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	031b      	lsls	r3, r3, #12
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003418:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800343a:	b480      	push	{r7}
 800343c:	b085      	sub	sp, #20
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	f043 0307 	orr.w	r3, r3, #7
 800345c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800346e:	b480      	push	{r7}
 8003470:	b087      	sub	sp, #28
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003488:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	431a      	orrs	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4313      	orrs	r3, r2
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	609a      	str	r2, [r3, #8]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e041      	b.n	8003548 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d009      	beq.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003510:	d004      	beq.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10c      	bne.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003522:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40000400 	.word	0x40000400

0800355c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e042      	b.n	8003618 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd febe 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	@ 0x24
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fc7f 	bl	8003ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b0ba      	sub	sp, #232	@ 0xe8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800365e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_UART_IRQHandler+0x66>
 8003672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fb63 	bl	8003d4a <UART_Receive_IT>
      return;
 8003684:	e25b      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 80de 	beq.w	800384c <HAL_UART_IRQHandler+0x22c>
 8003690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80d1 	beq.w	800384c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_UART_IRQHandler+0xae>
 80036b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_UART_IRQHandler+0xd2>
 80036da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	f043 0202 	orr.w	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_UART_IRQHandler+0xf6>
 80036fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f043 0204 	orr.w	r2, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d011      	beq.n	8003746 <HAL_UART_IRQHandler+0x126>
 8003722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800372e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f043 0208 	orr.w	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 81f2 	beq.w	8003b34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_UART_IRQHandler+0x14e>
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 faee 	bl	8003d4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_UART_IRQHandler+0x17a>
 8003792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04f      	beq.n	800383a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f9f8 	bl	8003b90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d041      	beq.n	8003832 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3314      	adds	r3, #20
 80037b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3314      	adds	r3, #20
 80037d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1d9      	bne.n	80037ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d013      	beq.n	800382a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	4a7e      	ldr	r2, [pc, #504]	@ (8003a00 <HAL_UART_IRQHandler+0x3e0>)
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fff2 	bl	80017f8 <HAL_DMA_Abort_IT>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003824:	4610      	mov	r0, r2
 8003826:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e00e      	b.n	8003848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f99c 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	e00a      	b.n	8003848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f998 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	e006      	b.n	8003848 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f994 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003846:	e175      	b.n	8003b34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	bf00      	nop
    return;
 800384a:	e173      	b.n	8003b34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	2b01      	cmp	r3, #1
 8003852:	f040 814f 	bne.w	8003af4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8148 	beq.w	8003af4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8141 	beq.w	8003af4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80b6 	beq.w	8003a04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8145 	beq.w	8003b38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b6:	429a      	cmp	r2, r3
 80038b8:	f080 813e 	bcs.w	8003b38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	f000 8088 	beq.w	80039e0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038fc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003900:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003908:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1d9      	bne.n	80038d0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800392c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003940:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003944:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003948:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003952:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e1      	bne.n	800391c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800396a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800396e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800397c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800397e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003982:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800398a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e3      	bne.n	8003958 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b0:	f023 0310 	bic.w	r3, r3, #16
 80039b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e3      	bne.n	800399e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd fed1 	bl	8001782 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8bf 	bl	8003b7a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039fc:	e09c      	b.n	8003b38 <HAL_UART_IRQHandler+0x518>
 80039fe:	bf00      	nop
 8003a00:	08003c55 	.word	0x08003c55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 808e 	beq.w	8003b3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8089 	beq.w	8003b3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e3      	bne.n	8003a2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	623b      	str	r3, [r7, #32]
   return(result);
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e3      	bne.n	8003a62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0310 	bic.w	r3, r3, #16
 8003abe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	330c      	adds	r3, #12
 8003ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003acc:	61fa      	str	r2, [r7, #28]
 8003ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	69b9      	ldr	r1, [r7, #24]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e3      	bne.n	8003aa8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ae6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f844 	bl	8003b7a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af2:	e023      	b.n	8003b3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <HAL_UART_IRQHandler+0x4f4>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8b5 	bl	8003c7c <UART_Transmit_IT>
    return;
 8003b12:	e014      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_UART_IRQHandler+0x51e>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8f4 	bl	8003d1a <UART_EndTransmit_IT>
    return;
 8003b32:	e004      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b34:	bf00      	nop
 8003b36:	e002      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b38:	bf00      	nop
 8003b3a:	e000      	b.n	8003b3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b3c:	bf00      	nop
  }
}
 8003b3e:	37e8      	adds	r7, #232	@ 0xe8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b095      	sub	sp, #84	@ 0x54
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003baa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bb8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e5      	bne.n	8003bcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d119      	bne.n	8003c3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 0310 	bic.w	r3, r3, #16
 8003c1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c28:	61ba      	str	r2, [r7, #24]
 8003c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6979      	ldr	r1, [r7, #20]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	613b      	str	r3, [r7, #16]
   return(result);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e5      	bne.n	8003c08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c4a:	bf00      	nop
 8003c4c:	3754      	adds	r7, #84	@ 0x54
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr

08003c54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff7a 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b21      	cmp	r3, #33	@ 0x21
 8003c8e:	d13e      	bne.n	8003d0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	d114      	bne.n	8003cc4 <UART_Transmit_IT+0x48>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d110      	bne.n	8003cc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	621a      	str	r2, [r3, #32]
 8003cc2:	e008      	b.n	8003cd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	1c59      	adds	r1, r3, #1
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6211      	str	r1, [r2, #32]
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10f      	bne.n	8003d0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ff02 	bl	8003b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b08c      	sub	sp, #48	@ 0x30
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b22      	cmp	r3, #34	@ 0x22
 8003d5c:	f040 80ae 	bne.w	8003ebc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d68:	d117      	bne.n	8003d9a <UART_Receive_IT+0x50>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d113      	bne.n	8003d9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d98:	e026      	b.n	8003de8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dac:	d007      	beq.n	8003dbe <UART_Receive_IT+0x74>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <UART_Receive_IT+0x82>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e008      	b.n	8003dde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ddc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4619      	mov	r1, r3
 8003df6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d15d      	bne.n	8003eb8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0220 	bic.w	r2, r2, #32
 8003e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d135      	bne.n	8003eae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	613b      	str	r3, [r7, #16]
   return(result);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f023 0310 	bic.w	r3, r3, #16
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e68:	623a      	str	r2, [r7, #32]
 8003e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	69f9      	ldr	r1, [r7, #28]
 8003e6e:	6a3a      	ldr	r2, [r7, #32]
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e5      	bne.n	8003e48 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d10a      	bne.n	8003ea0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fe67 	bl	8003b7a <HAL_UARTEx_RxEventCallback>
 8003eac:	e002      	b.n	8003eb4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff fe51 	bl	8003b56 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e002      	b.n	8003ebe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3730      	adds	r7, #48	@ 0x30
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f02:	f023 030c 	bic.w	r3, r3, #12
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699a      	ldr	r2, [r3, #24]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003fdc <UART_SetConfig+0x114>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d103      	bne.n	8003f38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f30:	f7fe ff18 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	e002      	b.n	8003f3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe ff00 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	4a22      	ldr	r2, [pc, #136]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	0119      	lsls	r1, r3, #4
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009a      	lsls	r2, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f74:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003f76:	fba3 0302 	umull	r0, r3, r3, r2
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2064      	movs	r0, #100	@ 0x64
 8003f7e:	fb00 f303 	mul.w	r3, r0, r3
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	3332      	adds	r3, #50	@ 0x32
 8003f88:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f94:	4419      	add	r1, r3
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009a      	lsls	r2, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fac:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003fae:	fba3 0302 	umull	r0, r3, r3, r2
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2064      	movs	r0, #100	@ 0x64
 8003fb6:	fb00 f303 	mul.w	r3, r0, r3
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	@ 0x32
 8003fc0:	4a07      	ldr	r2, [pc, #28]	@ (8003fe0 <UART_SetConfig+0x118>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40013800 	.word	0x40013800
 8003fe0:	51eb851f 	.word	0x51eb851f

08003fe4 <memset>:
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4402      	add	r2, r0
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d100      	bne.n	8003fee <memset+0xa>
 8003fec:	4770      	bx	lr
 8003fee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ff2:	e7f9      	b.n	8003fe8 <memset+0x4>

08003ff4 <__libc_init_array>:
 8003ff4:	b570      	push	{r4, r5, r6, lr}
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	4d0c      	ldr	r5, [pc, #48]	@ (800402c <__libc_init_array+0x38>)
 8003ffa:	4c0d      	ldr	r4, [pc, #52]	@ (8004030 <__libc_init_array+0x3c>)
 8003ffc:	1b64      	subs	r4, r4, r5
 8003ffe:	10a4      	asrs	r4, r4, #2
 8004000:	42a6      	cmp	r6, r4
 8004002:	d109      	bne.n	8004018 <__libc_init_array+0x24>
 8004004:	f000 f81a 	bl	800403c <_init>
 8004008:	2600      	movs	r6, #0
 800400a:	4d0a      	ldr	r5, [pc, #40]	@ (8004034 <__libc_init_array+0x40>)
 800400c:	4c0a      	ldr	r4, [pc, #40]	@ (8004038 <__libc_init_array+0x44>)
 800400e:	1b64      	subs	r4, r4, r5
 8004010:	10a4      	asrs	r4, r4, #2
 8004012:	42a6      	cmp	r6, r4
 8004014:	d105      	bne.n	8004022 <__libc_init_array+0x2e>
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	f855 3b04 	ldr.w	r3, [r5], #4
 800401c:	4798      	blx	r3
 800401e:	3601      	adds	r6, #1
 8004020:	e7ee      	b.n	8004000 <__libc_init_array+0xc>
 8004022:	f855 3b04 	ldr.w	r3, [r5], #4
 8004026:	4798      	blx	r3
 8004028:	3601      	adds	r6, #1
 800402a:	e7f2      	b.n	8004012 <__libc_init_array+0x1e>
 800402c:	08004080 	.word	0x08004080
 8004030:	08004080 	.word	0x08004080
 8004034:	08004080 	.word	0x08004080
 8004038:	08004084 	.word	0x08004084

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
